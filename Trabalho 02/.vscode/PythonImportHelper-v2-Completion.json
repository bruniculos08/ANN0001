[
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "CurveFitMethods01",
        "description": "CurveFitMethods01",
        "peekOfCode": "def calc_coeffs(X, Y, degree = 1):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "CurveFitMethods01",
        "description": "CurveFitMethods01",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\ndef calc_non_linear_coeffs(X, Y):\n    # Traslação do gráfico sobre o eixo Y:\n    const_Y = min(Y)",
        "detail": "CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "CurveFitMethods01",
        "description": "CurveFitMethods01",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y):\n    # Traslação do gráfico sobre o eixo Y:\n    const_Y = min(Y)\n    if(const_Y < 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    # Traslação do gráfico sobre o eixo X:\n    const_X = min(X)\n    if(const_X < 0):",
        "detail": "CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "CurveFitMethods01",
        "description": "CurveFitMethods01",
        "peekOfCode": "def build_non_linear(coeffs):\n    def func(x):\n        return ((coeffs['a']/coeffs['b'])*(1/sqrt(x + coeffs['k'])) +  1/coeffs['b'])**2 - coeffs['c']\n    return func\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.7708, 1.6674, 2.3526, 2.9878, 4.1301, 4.6131, 5.6179, 6.3146, 7.0627, 8.0253, 8.8753, 9.421]\n    Y = [6.6604, 3.6621, 2.7577, 2.3334, 1.8311, 1.6729, 1.4886, 1.3931, 1.2011, 1.2012, 1.206, 1.0941]\n    values = [1.1859, 4.6267, 5.8824]\n    coeffs = calc_non_linear_coeffs(X, Y)",
        "detail": "CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "diff_fin",
        "kind": 2,
        "importPath": "DeritvativesMethods01",
        "description": "DeritvativesMethods01",
        "peekOfCode": "def diff_fin(X, x0, k):\n    n = len(X)\n    A = []\n    B = []\n    for i in range(n):\n        row = []\n        for xi in X:\n            row.append(xi**i)\n        A.append(row)\n        if i < k:",
        "detail": "DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "get_aprox",
        "kind": 2,
        "importPath": "DeritvativesMethods01",
        "description": "DeritvativesMethods01",
        "peekOfCode": "def get_aprox(X, coeffs, f):\n    sum = 0\n    for xi, ci in zip(X, coeffs):\n        sum += ci*f(xi)\n    return sum\n# Contrução da fórmula de Taylor para n:\ndef build_taylor(X, x0, f, n):\n    def p(x):\n        poly = f(x0)\n        for i in range(n):",
        "detail": "DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "build_taylor",
        "kind": 2,
        "importPath": "DeritvativesMethods01",
        "description": "DeritvativesMethods01",
        "peekOfCode": "def build_taylor(X, x0, f, n):\n    def p(x):\n        poly = f(x0)\n        for i in range(n):\n            coeffs = diff_fin(X, x0, i+1)\n            poly += get_aprox(X, coeffs, f) * (x - x0)**(i+1) / factorial(i+1)\n        return poly\n    return p\n# Método de extrapolação de Richardson:\ndef richardson(f, x0, h, k):",
        "detail": "DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "DeritvativesMethods01",
        "description": "DeritvativesMethods01",
        "peekOfCode": "def richardson(f, x0, h, k):\n    table = []\n    for i in range(k):\n        item = F1(f, x0, h/(2**i))\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)\n            table[j] = new_item\n    return table[0]",
        "detail": "DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "F1",
        "kind": 2,
        "importPath": "DeritvativesMethods01",
        "description": "DeritvativesMethods01",
        "peekOfCode": "def F1(f, x0, h):\n    return (f(x0+h) - f(x0))/h\n# Método de extrapolação de Richardson usando:\ndef richardson_alternative(approximations, k):\n    # Note que aproximantion[i] é a função F1 calculada na linha i do método, ou seja, com F1(h/2**i):\n    table = []\n    for i in range(k):\n        item = approximations[i]\n        table.append(item)\n    for i in range(k):",
        "detail": "DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "richardson_alternative",
        "kind": 2,
        "importPath": "DeritvativesMethods01",
        "description": "DeritvativesMethods01",
        "peekOfCode": "def richardson_alternative(approximations, k):\n    # Note que aproximantion[i] é a função F1 calculada na linha i do método, ou seja, com F1(h/2**i):\n    table = []\n    for i in range(k):\n        item = approximations[i]\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)\n            table[j] = new_item",
        "detail": "DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 2,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "def v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "cd",
        "kind": 5,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "cd = 0.43\ng = 9.81\nm = 74.08\n# Fórmula:\ndef v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "g = 9.81\nm = 74.08\n# Fórmula:\ndef v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "IntegrationMethods01",
        "description": "IntegrationMethods01",
        "peekOfCode": "m = 74.08\n# Fórmula:\ndef v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)",
        "detail": "IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods02",
        "description": "IntegrationMethods02",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods03",
        "description": "IntegrationMethods03",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods04",
        "description": "IntegrationMethods04",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "IntegrationMethods05",
        "description": "IntegrationMethods05",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "raiz2",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz2 = [-0.5773502691896257, 0.5773502691896257]\npeso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso2",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz3",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso3",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz4",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso4",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz5",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso5",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz6",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso6",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz7",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso7",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz8",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso8",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz9",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso9",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz10",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso10",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz11",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso11",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz12",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso12",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz13",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso13",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz14",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso14",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz15",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso15",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz16",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso16",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz17",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]\npeso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso17",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz18",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso18",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz19",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso19",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz20",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "raiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso20",
        "kind": 5,
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "peekOfCode": "peso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "NodesAndWeights",
        "documentation": {}
    }
]