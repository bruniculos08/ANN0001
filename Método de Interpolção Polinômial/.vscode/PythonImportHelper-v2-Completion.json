[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "vandermonde",
        "kind": 2,
        "importPath": "Interpolação",
        "description": "Interpolação",
        "peekOfCode": "def vandermonde(coords_X, coords_Y):\n    X = []\n    Y = coords_Y\n    n = len(coords_X)\n    for xi in coords_X:\n        # Cada linha é formada da seguinte forma: 1 + xi**1 + xi**2 + ... + xi**(n-1)\n        row = [1] + [xi**k for k in range(1, n)]\n        # Obs.: lembre-se que a função range começa no elemento esquerdo do argumento mas...\n        # ... termina no elemento direito do argumento - 1.\n        X.append(row)",
        "detail": "Interpolação",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Interpolação",
        "description": "Interpolação",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        soma = coeffs[0]                         # soma = a0\n        for i, ci in enumerate(coeffs[1:], 1):   # coeffs[1:] pois já adicionamos o elemento a0*x**0\n            soma += ci*x**i                      # enumerate permite usar o índice do elemento no \"for\" junto ao próprio elemento...\n        return soma                              # ... e setamos tal contador pra começar em 1 (por isso \"(coeffs[1:], 1)\", para...\n    return func                                  # ... usar i como expoente).\n# Apesar de lembrar a função \"main\" de python, a seguinte função separa um pedaço do código em que, caso todo o código seja...\n# ... importado para outro arquivo, este pedaço não será importado:\nif __name__ == '__main__':",
        "detail": "Interpolação",
        "documentation": {}
    }
]