from math import *
import numpy as np
import matplotlib.pyplot as plt

def rungeKutta(df, x0, y0, X):

    # Criando listas de coordenadas com as coordenadas iniciais:
    X = [x0] + X
    Y = [y0]
    n = len(X)

    for k in range(1, n):
        h = X[k] - X[k-1]
        m1 = df(X[k-1], Y[k-1])
        m2 = df(X[k-1] + h/2, Y[k-1] + m1*h/2)
        m3 = df(X[k-1] + h/2, Y[k-1] + m2*h/2)
        m4 = df(X[k-1] + h, Y[k-1] + m3*h)
        yk = Y[k-1] + (1/6)*(m1 + 2*m2 + 2*m3 + m4)*h  
        Y.append(yk)
    return X, Y

if __name__ == '__main__':
    

    # Exemplo 01:

    # Constantes:
    t0 = 0
    p0 = 0.00167
    λ = 0.01204
    μ = 0.00775
    r = 0.15961

    # Número de indivíduos na população no tempo t:
    def dx(x, t):
        return (λ - μ)*x

    # Número de indivíduos rebeldes na população no tempo t:
    def dxn(xn, x, t):
        return (λ - μ)*xn + r*λ*(x - xn)

    # Proporção de rebeldes na população no tempo t:
    def p(xn, x):
        return xn/x

    # Derivada da proporção de rebeldes na população no tempo t:
    def dp(t, p_t):
        return r*λ*(1-p_t)

    # Solução da equação diferencial:
    def pt(t):
        return 1 - 0.9985*e**(-r*λ*t)
    
    T = [0.10462, 0.25995, 0.49702, 0.65569, 0.97176, 1.13427, 1.37198, 1.42463, 1.76529, 1.9557, 2.12531, 2.27375, 2.5517, 2.69528, 2.90956, 3.13102, 3.23151, 3.54688, 3.70281, 3.88052, 4.09559, 4.28596, 4.48676, 4.76031, 4.86408, 5.08953, 5.2877, 5.44885, 5.68397, 5.91214, 6.05573, 6.33215, 6.43418, 6.68719, 6.93904, 7.0671, 7.36059, 7.46139, 7.65165, 7.97557, 8.15769, 8.29494, 8.54229, 8.62618, 8.9117, 9.11214, 9.32979, 9.47214, 9.72221, 9.83738, 10.15849, 10.27593, 10.50225, 10.75001, 10.94978, 11.15926, 11.33657, 11.53554, 11.67364, 11.83108, 12.04646, 12.37185, 12.42402, 12.74392, 12.88835, 13.16847, 13.35842, 13.57601, 13.67537, 13.93022, 14.0971, 14.32582, 14.55134, 14.67549, 14.9288, 15.02341, 15.3134, 15.53805, 15.68584, 15.94826, 16.13921, 16.29268, 16.51553, 16.72531, 16.88918, 17.06901, 17.36474, 17.53772, 17.71655, 17.90039, 18.04709, 18.26408, 18.47831, 18.66445, 18.88347, 19.14548, 19.24876, 19.57357, 19.68293, 19.91376, 20.16654, 20.36288, 20.5407, 20.76485, 20.97519, 21.04839, 21.37846, 21.48466, 21.74974, 21.84127, 22.09135, 22.32515, 22.52711, 22.69082, 22.92446, 23.12396, 23.29732, 23.55711, 23.67058, 23.85859, 24.15527, 24.36199, 24.45562, 24.64942, 24.91294, 25.11263, 25.28155, 25.51889, 25.65616, 25.91198, 26.02034, 26.27299, 26.47633, 26.68091, 26.93127, 27.06765, 27.37708, 27.49399, 27.63738, 27.84971, 28.03666, 28.32543, 28.50851, 28.71479, 28.87411, 29.17148, 29.31102, 29.48174, 29.66233, 29.9068, 30.03058, 30.29115, 30.54955, 30.62425, 30.82937, 31.06274, 31.33497, 31.47783, 31.6368, 31.82309, 32.07636, 32.29241, 32.57363, 32.6932, 32.97709, 33.026, 33.34341, 33.45855, 33.70255, 33.87452, 34.12597, 34.35138, 34.42653, 34.64484, 34.95384, 35.05452, 35.25646, 35.49442, 35.62289, 35.84952, 36.06399, 36.31707, 36.47644, 36.63849, 36.86541, 37.10615, 37.24955, 37.454, 37.64716, 37.86301, 38.1024, 38.34478, 38.57364, 38.63713, 38.88184, 39.08881, 39.25765, 39.56958, 39.69706, 39.92797, 40.10037, 40.30396, 40.4315, 40.71501, 40.90141, 41.15426, 41.29956, 41.53155, 41.64036, 41.85212, 42.08143, 42.33682, 42.55113, 42.64939, 42.94765, 43.15663, 43.25461, 43.42936, 43.72626, 43.9176, 44.11259, 44.31868, 44.52685, 44.73388, 44.87396, 45.09292, 45.27549, 45.55353, 45.71477, 45.97206, 46.11731, 46.22792, 46.55343, 46.71083, 46.95268, 47.10611, 47.36624, 47.50076, 47.68735, 47.86777, 48.14532, 48.24228, 48.498, 48.73801, 48.84506, 49.1757, 49.25263, 49.54886, 49.77556, 49.82841, 50.0947, 50.35597, 50.57275, 50.63619, 50.95405, 51.09398, 51.27406, 51.44225, 51.62983, 51.91829, 52.15875, 52.35178, 52.49564, 52.77686, 52.96993, 53.15177, 53.31098, 53.53954, 53.64312, 53.9694, 54.06838, 54.24635, 54.46087, 54.69038, 54.86956, 55.1125, 55.29672, 55.54913, 55.73094, 55.97726, 56.17839, 56.2835, 56.55004, 56.73551, 56.94138, 57.13657, 57.30201, 57.51325, 57.71461, 57.88475, 58.09747, 58.30821, 58.54249, 58.70482, 58.83115, 59.14314, 59.31545, 59.44097, 59.68797, 59.93221, 60.10036, 60.34967, 60.55741, 60.6965, 60.93284, 61.15051, 61.28209, 61.43208, 61.66593, 61.928, 62.02318, 62.31817, 62.57422, 62.73281, 62.92324, 63.05969, 63.24474, 63.5766, 63.68884, 63.82926, 64.13551, 64.36292, 64.57354, 64.71274, 64.9234, 65.16687, 65.29805, 65.45104, 65.74748, 65.95981, 66.17254, 66.23799, 66.43943, 66.68398, 66.89518, 67.12307, 67.25633, 67.49607, 67.63229, 67.89522, 68.07269, 68.22584, 68.52136, 68.71925, 68.93724, 69.08454, 69.31524, 69.55451, 69.64613, 69.88536, 70.06811, 70.2786, 70.46115, 70.69209, 70.97987, 71.09759, 71.35822, 71.55414, 71.7501, 71.85713, 72.16123, 72.36252, 72.43404, 72.77506, 72.88941, 73.13029, 73.31334, 73.48038, 73.75016, 73.89843, 74.15651, 74.22168, 74.5202, 74.65923, 74.85696, 75.08477, 75.25504, 75.49418, 75.75882, 75.88444, 76.03645, 76.27411, 76.57873, 76.69161, 76.95334, 77.13342, 77.33482, 77.45564, 77.62987, 77.94058, 78.06685, 78.2388, 78.43769, 78.71071, 78.97517, 79.14139, 79.3784, 79.49768, 79.68132, 79.9721, 80.1478, 80.24373, 80.57043, 80.73253, 80.85675, 81.08119, 81.34436, 81.42932, 81.74353, 81.82965, 82.15938, 82.29007, 82.4212, 82.6523, 82.8606, 83.06236, 83.25206, 83.51552, 83.66601, 83.83619, 84.07382, 84.23678, 84.50829, 84.76585, 84.86645, 85.15688, 85.22273, 85.49998, 85.71582, 85.88888, 86.09024, 86.23621, 86.43475, 86.77321, 86.92938, 87.06982, 87.22253, 87.54466, 87.72304, 87.91498, 88.14333, 88.33719, 88.51329, 88.74609, 88.96215, 89.08692, 89.2308, 89.42154, 89.6201, 89.93369, 90.08999, 90.35114, 90.42623, 90.66581, 90.83955, 91.1557, 91.22371, 91.48536, 91.63789, 91.8733, 92.1143, 92.36347, 92.55861, 92.76515, 92.87898, 93.05763, 93.28436, 93.56237, 93.63938, 93.84597, 94.09431, 94.36596, 94.57688, 94.73504, 94.84932, 95.0905, 95.33103, 95.5474, 95.65331, 95.93203, 96.05238, 96.30415, 96.50066, 96.73288, 96.93913, 97.03127, 97.2269, 97.46547, 97.70348, 97.89263, 98.07649, 98.31534, 98.49155, 98.73749, 98.87535, 99.0482, 99.25634, 99.448, 99.70909, 99.94919]

    T, P = rungeKutta(dp, t0, p0, T)

    Erros = []
    for t, pk in zip(T, P):
        erro = abs(pt(t) - pk)
        Erros.append(erro)

    for pk, erro in zip(P, Erros):
        print(f"{pk}, {erro},") 