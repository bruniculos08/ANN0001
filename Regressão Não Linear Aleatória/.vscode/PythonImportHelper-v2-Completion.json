[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória",
        "description": "Regressão Não Linear Aleatória",
        "peekOfCode": "def calc_coeffs(X, Y, degree = 1):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "Regressão Não Linear Aleatória",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória",
        "description": "Regressão Não Linear Aleatória",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y):\n    const_Y= min(Y)\n    if(const_Y <= 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Não Linear Aleatória",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória",
        "description": "Regressão Não Linear Aleatória",
        "peekOfCode": "def build_non_linear(coeffs):\n    def f(x):\n        return ((coeffs['a'] + sqrt(x+coeffs['k']))/(coeffs['b']*sqrt(x+coeffs['k'])))**2 - coeffs['c']\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.7708, 1.6674, 2.3526, 2.9878, 4.1301, 4.6131, 5.6179, 6.3146, 7.0627, 8.0253, 8.8753, 9.421]\n    Y = [6.6604, 3.6621, 2.7577, 2.3334, 1.8311, 1.6729, 1.4886, 1.3931, 1.2011, 1.2012, 1.206, 1.0941]\n    values = [1.1859, 4.6267, 5.8824]\n    coeffs = calc_non_linear_coeffs(X, Y)     ",
        "detail": "Regressão Não Linear Aleatória",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Temp",
        "description": "Regressão Temp",
        "peekOfCode": "def calc_coeffs(X, Y, degree = 1):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "Regressão Temp",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "Regressão Temp",
        "description": "Regressão Temp",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y):\n    const_Y = min(Y)\n    if(const_Y <= 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Temp",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Regressão Temp",
        "description": "Regressão Temp",
        "peekOfCode": "def build_non_linear(coeffs):\n    def f(x):\n        return ((coeffs['a']/coeffs['b'])*(1/sqrt(x + coeffs['k'])) + 1/coeffs['b'])**2 - coeffs['c']\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return ((1 + sqrt(x)))**2/((1*sqrt(x)))**2\n    X = [xi for xi in range(1, 100, 4)]\n    Y = [f(xi) for xi in X]",
        "detail": "Regressão Temp",
        "documentation": {}
    }
]