[
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "new",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "Método da Falsa Posição.falsePosition",
        "description": "Método da Falsa Posição.falsePosition",
        "peekOfCode": "def function(x):\n    return pi*x-exp(x)\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, tol):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):",
        "detail": "Método da Falsa Posição.falsePosition",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Método da Falsa Posição.falsePosition",
        "description": "Método da Falsa Posição.falsePosition",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, tol):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        print(\"x = %.17f na %i iteração\" % (x, i))",
        "detail": "Método da Falsa Posição.falsePosition",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Método da Falsa Posição.falsePosition",
        "description": "Método da Falsa Posição.falsePosition",
        "peekOfCode": "def falsePosition(f, a, b, tol):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        print(\"x = %.17f na %i iteração\" % (x, i))\n        if(abs(f(x) < tol)): \n            break\n        if(f(a)*f(x) < 0): \n            b = x",
        "detail": "Método da Falsa Posição.falsePosition",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "def f(x): \n    return pi*x - exp(x)\ndef aproximateDerivative(x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "def aproximateDerivative(x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nvetor = [1, 3, 5]",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "def secante(x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nvetor = [1, 3, 5]\nx0 = 0.83824\nx1 = 2.05516",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "vetor = [1, 3, 5]\nx0 = 0.83824\nx1 = 2.05516\nfor n in vetor:\n    secante(x1, x0, n)",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "x0 = 0.83824\nx1 = 2.05516\nfor n in vetor:\n    secante(x1, x0, n)",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "x1 = 2.05516\nfor n in vetor:\n    secante(x1, x0, n)",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.sum",
        "description": "Método de Gauss-Jordan.sum",
        "peekOfCode": "alpha = (53/180)*pi\nbeta = (59/180)*pi\nprint(\"\\nAbout alpha: \")\nprint(\"cos(alpha) =\", cos(alpha).real)\nprint(\"sin(alpha) =\", sin(alpha).real)\nprint(\"\\nAbout beta: \")\nprint(\"cos(beta) =\", cos(beta).real)\nprint(\"sin(beta) =\", sin(beta).real)",
        "detail": "Método de Gauss-Jordan.sum",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.sum",
        "description": "Método de Gauss-Jordan.sum",
        "peekOfCode": "beta = (59/180)*pi\nprint(\"\\nAbout alpha: \")\nprint(\"cos(alpha) =\", cos(alpha).real)\nprint(\"sin(alpha) =\", sin(alpha).real)\nprint(\"\\nAbout beta: \")\nprint(\"cos(beta) =\", cos(beta).real)\nprint(\"sin(beta) =\", sin(beta).real)",
        "detail": "Método de Gauss-Jordan.sum",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "m1 = 3.75\nm2 = 5.8\nm3 = 3.77\ng = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "m2 = 5.8\nm3 = 3.77\ng = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "m3",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "m3 = 3.77\ng = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "g = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "k1",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "k1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "k2",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "k2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "k3",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "k3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "vandermonde",
        "kind": 2,
        "importPath": "Método de Interpolção Polinômial.Interpolação",
        "description": "Método de Interpolção Polinômial.Interpolação",
        "peekOfCode": "def vandermonde(coords_X, coords_Y):\n    X = []\n    Y = coords_Y\n    n = len(coords_X)\n    for xi in coords_X:\n        # Cada linha é formada da seguinte forma: 1 + xi**1 + xi**2 + ... + xi**(n-1)\n        row = [1] + [xi**k for k in range(1, n)]\n        # Obs.: lembre-se que a função range começa no elemento esquerdo do argumento mas...\n        # ... termina no elemento direito do argumento - 1.\n        X.append(row)",
        "detail": "Método de Interpolção Polinômial.Interpolação",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Método de Interpolção Polinômial.Interpolação",
        "description": "Método de Interpolção Polinômial.Interpolação",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        soma = coeffs[0]                         # soma = a0\n        for i, ci in enumerate(coeffs[1:], 1):   # coeffs[1:] pois já adicionamos o elemento a0*x**0\n            soma += ci*x**i                      # enumerate permite usar o índice do elemento no \"for\" junto ao próprio elemento...\n        return soma                              # ... e setamos tal contador pra começar em 1 (por isso \"(coeffs[1:], 1)\", para...\n    return func                                  # ... usar i como expoente).\n# Apesar de lembrar a função \"main\" de python, a seguinte função separa um pedaço do código em que, caso todo o código seja...\n# ... importado para outro arquivo, este pedaço não será importado:\nif __name__ == '__main__':",
        "detail": "Método de Interpolção Polinômial.Interpolação",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "def g(x):\n    # Python converte para complex ao usar raiz quadrada\n    c = ((3 * pow(x, 4) + 2 * pow(x, 2) + 3) / (4 * pow(x, 3) + 4 * x - 1))\n    return c\ndef f(x):\n   return x**2\ndef pontoFixo(g, x, n):\n    for i in range(n):\n        x_n = g(x)\n        x = x_n",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "def f(x):\n   return x**2\ndef pontoFixo(g, x, n):\n    for i in range(n):\n        x_n = g(x)\n        x = x_n\n    print(\"%.17f,\"%(x))\nx_0 = 1.09298\nvetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "pontoFixo",
        "kind": 2,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "def pontoFixo(g, x, n):\n    for i in range(n):\n        x_n = g(x)\n        x = x_n\n    print(\"%.17f,\"%(x))\nx_0 = 1.09298\nvetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:\n    pontoFixo(g, x_0, i)",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "x_0 = 1.09298\nvetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:\n    pontoFixo(g, x_0, i)",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "vetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:\n    pontoFixo(g, x_0, i)",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "T1.Q22",
        "description": "T1.Q22",
        "peekOfCode": "def function(x):\n    return exp(5*x)-2\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):",
        "detail": "T1.Q22",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q22",
        "description": "T1.Q22",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        #print(\"x = %.17f na %i iteração\" % (x, i))",
        "detail": "T1.Q22",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q22",
        "description": "T1.Q22",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        #print(\"x = %.17f na %i iteração\" % (x, i))\n        if(i >= n): \n            break\n        if(f(a)*f(x) < 0): \n            b = x",
        "detail": "T1.Q22",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q22",
        "description": "T1.Q22",
        "peekOfCode": "vetor = [1 , 25, 50, 100, 200, 400, 800, 1600, 3200, 4800, 6400, 8000, 10000]\nfor i in vetor:\n    falsePosition(function, -0.993624, 1.9528124, i)",
        "detail": "T1.Q22",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "dP",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.1",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "P_0",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "P_0 = 1970647\nP_1 = 4214581\nv = 499677\n# x = lambda\ndef P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "P_1",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "P_1 = 4214581\nv = 499677\n# x = lambda\ndef P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "v = 499677\n# x = lambda\ndef P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "a = 0.1\nb = 1.66\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(P, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "b = 1.66\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(P, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(P, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.1",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "x_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.1\nx_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.1\nx_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "x_0 = 0.1\nx_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "x_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "a = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "b = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q27",
        "description": "T1.Q27",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "T1.Q27",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "dg",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.5",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "G = 9.81\nt = 8.47\nm = 66.9\nv = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "t = 8.47\nm = 66.9\nv = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "m = 66.9\nv = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "v = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "a = 0.5\nb = 57.37\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "b = 57.37\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.93",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "x_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.93\nx_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.93\nx_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "x_0 = 1.93\nx_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "x_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "a = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "b = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q28",
        "description": "T1.Q28",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q28",
        "documentation": {}
    },
    {
        "label": "sech",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))\n    return result.real",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "dg",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.34",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "G = 9.81\nt = 7.35\nL = 7.45\nv = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "t = 7.35\nL = 7.45\nv = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "L = 7.45\nv = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "v = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "a = 0.34\nb = 18.99\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "b = 18.99\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "x_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "#x_1",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "a = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "b = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q30",
        "description": "T1.Q30",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "T1.Q30",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def A(y):\n    return 4.83*y + (y**2)/2\ndef B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.32",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "Q = 158.7\ng = 9.81\ndef A(y):\n    return 4.83*y + (y**2)/2\ndef B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "g = 9.81\ndef A(y):\n    return 4.83*y + (y**2)/2\ndef B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) ",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "a = 0.32\nb = 8.93\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "b = 8.93\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "#x_1",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "a = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "b = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q31",
        "description": "T1.Q31",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q31",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def f(x):\n    result = pi*(x**2)*R - (pi/3)*(x**3) - V\n    return result.real\ndef df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "V = 286.6\nR = 5.18\n# x = lambda\ndef f(x):\n    result = pi*(x**2)*R - (pi/3)*(x**3) - V\n    return result.real\ndef df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "R = 5.18\n# x = lambda\ndef f(x):\n    result = pi*(x**2)*R - (pi/3)*(x**3) - V\n    return result.real\ndef df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "a = 0\nb = 10.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "b = 10.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.87",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "x_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.87\nx_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.87\nx_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "x_0 = 0.87\nx_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "x_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "a = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "b = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q32",
        "description": "T1.Q32",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q32",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "r = 6.18\nps = 192.82\npw = 1000\n# x = lambda\ndef f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "ps",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "ps = 192.82\npw = 1000\n# x = lambda\ndef f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "pw",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "pw = 1000\n# x = lambda\ndef f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "a = 0\nb = 12.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "b = 12.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.48",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "x_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.48\nx_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.48\nx_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "x_0 = 1.48\nx_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "x_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "a = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "b = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q33",
        "description": "T1.Q33",
        "peekOfCode": "vetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q33",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "r1 = 2.66\nr2 = 5.48\nH = 5.04\npt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "r2 = 5.48\nH = 5.04\npt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) ",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "H = 5.04\npt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "pt",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "pt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "pw",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "pw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "x = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "a = 0\nb = 5.04\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "b = 5.04\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.62",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.62\nx_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.62\nx_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "x_0 = 0.62\nx_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "x_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "a = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "b = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q34",
        "description": "T1.Q34",
        "peekOfCode": "vetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q34",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "r = 1.82\nL = 1.73\nV = 8.0\n# x = lambda\ndef f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "L = 1.73\nV = 8.0\n# x = lambda\ndef f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "V = 8.0\n# x = lambda\ndef f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "a = 0\nb = 1.82\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "b = 1.82\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.19",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.19\nx_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.19\nx_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "x_0 = 0.19\nx_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "x_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "a = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "b = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q35",
        "description": "T1.Q35",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q35",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def f(w):\n    result = -g/(2*(w**2))*(sinh(w*t) - sin(w*t)) - x\n    return result.real\ndef df(w):\n    result = (g/(w**3))*(sinh(w*t) - sin(w*t)) - (g/(2*(w**2)))*(t*cosh(w*t) - t*cos(w*t))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def df(w):\n    result = (g/(w**3))*(sinh(w*t) - sin(w*t)) - (g/(2*(w**2)))*(t*cosh(w*t) - t*cos(w*t))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = -5.11",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "t = 1.08\ng = 9.81\nx = 2.29\n# x = lambda\ndef f(w):\n    result = -g/(2*(w**2))*(sinh(w*t) - sin(w*t)) - x\n    return result.real\ndef df(w):\n    result = (g/(w**3))*(sinh(w*t) - sin(w*t)) - (g/(2*(w**2)))*(t*cosh(w*t) - t*cos(w*t))\n    return result.real",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "g = 9.81\nx = 2.29\n# x = lambda\ndef f(w):\n    result = -g/(2*(w**2))*(sinh(w*t) - sin(w*t)) - x\n    return result.real\ndef df(w):\n    result = (g/(w**3))*(sinh(w*t) - sin(w*t)) - (g/(2*(w**2)))*(t*cosh(w*t) - t*cos(w*t))\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "x = 2.29\n# x = lambda\ndef f(w):\n    result = -g/(2*(w**2))*(sinh(w*t) - sin(w*t)) - x\n    return result.real\ndef df(w):\n    result = (g/(w**3))*(sinh(w*t) - sin(w*t)) - (g/(2*(w**2)))*(t*cosh(w*t) - t*cos(w*t))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "a = -5.11\nb = 0.8\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = -1.23\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "b = 0.8\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = -1.23\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = -1.23\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = -4.43",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "x_0 = -1.23\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = -4.43\nx_1 = -1.62\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = -4.43\nx_1 = -1.62\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "x_0 = -4.43\nx_1 = -1.62\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = -5.87\nb = 0.47\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "x_1 = -1.62\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = -5.87\nb = 0.47\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = -5.87\nb = 0.47\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "a = -5.87\nb = 0.47\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "b = 0.47\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q36",
        "description": "T1.Q36",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q36",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def f(l):\n    result = A*B - 4*l*A - 4*l*B + 12*(l**2)\n    return result.real\ndef df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "A = 8.93\nB = 17.22\n# x = lambda\ndef f(l):\n    result = A*B - 4*l*A - 4*l*B + 12*(l**2)\n    return result.real\ndef df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "B = 17.22\n# x = lambda\ndef f(l):\n    result = A*B - 4*l*A - 4*l*B + 12*(l**2)\n    return result.real\ndef df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "a = 0\nb = 4.46\nvetor = [2, 4, 8, 12, 1000]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "b = 4.46\nvetor = [2, 4, 8, 12, 1000]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "vetor = [2, 4, 8, 12, 1000]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.72",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "x_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.72\nx_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.72\nx_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "x_0 = 0.72\nx_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "x_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "a = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "b = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q37",
        "description": "T1.Q37",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "T1.Q37",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "T1.Q5",
        "description": "T1.Q5",
        "peekOfCode": "def f(x):\n    return x*(x-1)*(x-2) + 0.42\ndef df(x):\n    return 3*(x**2) - 6*x + 2\ndef newton(f, df, c, iterations):\n    x = c\n    for i in range(iterations):\n        x = x - f(x)/df(x)\n    # Naprint(\"x = \", x,\" para \", iterations,\" iterações\")\n    print(\"%.10f,\"%x)",
        "detail": "T1.Q5",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "T1.Q5",
        "description": "T1.Q5",
        "peekOfCode": "def df(x):\n    return 3*(x**2) - 6*x + 2\ndef newton(f, df, c, iterations):\n    x = c\n    for i in range(iterations):\n        x = x - f(x)/df(x)\n    # Naprint(\"x = \", x,\" para \", iterations,\" iterações\")\n    print(\"%.10f,\"%x)\n        # Equação da reta tangente à P(c, f(c)) é dada por: y = f(c) + df(c)(x-c)\n        # Na interceção da reta com o eixo x temos:",
        "detail": "T1.Q5",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "T1.Q5",
        "description": "T1.Q5",
        "peekOfCode": "def newton(f, df, c, iterations):\n    x = c\n    for i in range(iterations):\n        x = x - f(x)/df(x)\n    # Naprint(\"x = \", x,\" para \", iterations,\" iterações\")\n    print(\"%.10f,\"%x)\n        # Equação da reta tangente à P(c, f(c)) é dada por: y = f(c) + df(c)(x-c)\n        # Na interceção da reta com o eixo x temos:\n        # 0 = f(c) + df(c)(x-c) \n        # -> x-c = - f(c)/df(c) ",
        "detail": "T1.Q5",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "T1.Q5",
        "description": "T1.Q5",
        "peekOfCode": "c = 2.65161653\nvetor = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]\nfor iterations in vetor:\n    newton(f, df, c, iterations)",
        "detail": "T1.Q5",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "T1.Q5",
        "description": "T1.Q5",
        "peekOfCode": "vetor = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]\nfor iterations in vetor:\n    newton(f, df, c, iterations)",
        "detail": "T1.Q5",
        "documentation": {}
    }
]