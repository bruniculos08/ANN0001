[
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "label",
        "importPath": "cProfile",
        "description": "cProfile",
        "isExtraImport": true,
        "detail": "cProfile",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "new",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "NodesAndWeights",
        "description": "NodesAndWeights",
        "isExtraImport": true,
        "detail": "NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Aproximação de funções.Aprox",
        "description": "Aproximação de funções.Aprox",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef aprox_coeffs(func_list, f, a, b, n):\n    A = []",
        "detail": "Aproximação de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Aproximação de funções.Aprox",
        "description": "Aproximação de funções.Aprox",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Aproximação de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Aproximação de funções.Aprox",
        "description": "Aproximação de funções.Aprox",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\nif __name__ == '__main__':\n    # Exemplo 01:\n    func_list = [lambda x: sin(x), lambda x: cos(x), lambda x: sin(3*x), lambda x: cos(3*x), lambda x: sin(5*x), lambda x: cos(5*x), lambda x: 1]\n    def f(x):\n        if int(x%2) == 0: return 0\n        else: return 1",
        "detail": "Aproximação de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef aprox_coeffs(func_list, f, a, b, n):\n    A = []",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs_ort",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def aprox_coeffs_ort(func_list, f, a, b, n):\n    coeffs = []\n    for fi in func_list:\n        ck = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)/trapeze_sum(lambda x: fi(x)*fi(x), a, b, n)\n        coeffs.append(ck)\n    return coeffs\n\"\"\"\nObserve que nesta outra função, dado que estamos considerando que 'func_list' é uma lista de funções duas à duas ortogonais, precisamos apenas\ncalcular os n elementos da diagonal da matriz A + os n elementos da matriz coluna B, assim temos que calcular 2n integrais apenas, e portanto,\nagora temos um problema de complexidade O(n).",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n\"\"\"\nFunção que retorna <f(x), g(x)> para um espaço vetorial de funções C[a,b], ou seja, que \nretorna o produto escalar entre duas funções f(x) e g(x) no intervalo [a,b]:\n\"\"\"\ndef prod_esc(f, g, a, b, n):\n    return trapeze_sum(lambda x: f(x)*g(x), a, b, n)",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "prod_esc",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def prod_esc(f, g, a, b, n):\n    return trapeze_sum(lambda x: f(x)*g(x), a, b, n)\n\"\"\"\nFunção que retorna (<f(x), g(x)>/<g(x), g(x)>).g(x), ou seja, o resultado da projeção de f(x) em g(x):\n\"\"\"\ndef proj(f, g, a, b, n):\n    def proj(x):\n        return (prod_esc(f, g, a, b, n)/prod_esc(g, g, a, b, n))*g(x)\n    return proj\n\"\"\"",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "proj",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def proj(f, g, a, b, n):\n    def proj(x):\n        return (prod_esc(f, g, a, b, n)/prod_esc(g, g, a, b, n))*g(x)\n    return proj\n\"\"\"\nFunção que retorna o resultado a constante k da projeção de f(x) em g(x), ou seja,\nk = <f(x), g(x)>/<g(x), g(x)>:\n\"\"\"\ndef proj_k(f, g, a, b, n) -> float:\n    return (prod_esc(f, g, a, b, n)/prod_esc(g, g, a, b, n))",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "proj_k",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def proj_k(f, g, a, b, n) -> float:\n    return (prod_esc(f, g, a, b, n)/prod_esc(g, g, a, b, n))\n\"\"\"\nFunção para ortogonalizar uma lista de funções (Gran Schimidt):\nNota: lembre-se que para ortogonalizar um função f(x) em relação à outra função g(x) deve se obter então uma nova\nfunção h(x) tal que:\n    h(x) = f(x) - proj<f(x), g(x)> = f(x) - k.g(x), onde k = <f(x), g(x)>/<g(x), g(x)>, \no que é igual a função f(x) subtraída da sua componente na mesma direção de g(x) (tratando as funções com vetores).\n\"\"\"\ndef ortog_funcs(func_list, a, b, n):",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "ortog_funcs",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def ortog_funcs(func_list, a, b, n):\n    G = [func_list[0]]\n    G_func_list = [symbolToFunc(func_list[0])]\n    for fi in func_list[1:]:\n        gi = fi - sum(proj_k(symbolToFunc(fi), symbolToFunc(gj), a, b, n)*gj for gj in G)\n        gi = simplify(gi)\n        G.append(gi)\n        G_func_list.append(symbolToFunc(gi))\n    return G_func_list\n\"\"\"",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    a = -1\n    b = 1",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    a = -1\n    b = 1\n    n = 256\n    def f1(x): return 1\n    def f2(x): return x\n    def f3(x): return x**2",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Aproximação e Ortogonalização de funções.Aprox",
        "description": "Aproximação e Ortogonalização de funções.Aprox",
        "peekOfCode": "k = <f(x), g(x)>/<g(x), g(x)>:\n\"\"\"\ndef proj_k(f, g, a, b, n) -> float:\n    return (prod_esc(f, g, a, b, n)/prod_esc(g, g, a, b, n))\n\"\"\"\nFunção para ortogonalizar uma lista de funções (Gran Schimidt):\nNota: lembre-se que para ortogonalizar um função f(x) em relação à outra função g(x) deve se obter então uma nova\nfunção h(x) tal que:\n    h(x) = f(x) - proj<f(x), g(x)> = f(x) - k.g(x), onde k = <f(x), g(x)>/<g(x), g(x)>, \no que é igual a função f(x) subtraída da sua componente na mesma direção de g(x) (tratando as funções com vetores).",
        "detail": "Aproximação e Ortogonalização de funções.Aprox",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "Método da Falsa Posição.falsePosition",
        "description": "Método da Falsa Posição.falsePosition",
        "peekOfCode": "def function(x):\n    return pi*x-exp(x)\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, tol):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):",
        "detail": "Método da Falsa Posição.falsePosition",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Método da Falsa Posição.falsePosition",
        "description": "Método da Falsa Posição.falsePosition",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, tol):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        print(\"x = %.17f na %i iteração\" % (x, i))",
        "detail": "Método da Falsa Posição.falsePosition",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Método da Falsa Posição.falsePosition",
        "description": "Método da Falsa Posição.falsePosition",
        "peekOfCode": "def falsePosition(f, a, b, tol):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        print(\"x = %.17f na %i iteração\" % (x, i))\n        if(abs(f(x) < tol)): \n            break\n        if(f(a)*f(x) < 0): \n            b = x",
        "detail": "Método da Falsa Posição.falsePosition",
        "documentation": {}
    },
    {
        "label": "raiz2",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz2 = [-0.5773502691896257, 0.5773502691896257]\npeso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso2",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz3",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso3",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz4",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso4",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz5",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso5",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz6",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso6",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz7",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso7",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz8",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso8",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz9",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso9",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz10",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso10",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz11",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso11",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz12",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso12",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz13",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso13",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz14",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso14",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz15",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso15",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz16",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso16",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz17",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]\npeso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso17",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz18",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso18",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz19",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso19",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz20",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "raiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso20",
        "kind": 5,
        "importPath": "Método da Quadratura Gaussiana.NodesAndWeights",
        "description": "Método da Quadratura Gaussiana.NodesAndWeights",
        "peekOfCode": "peso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "Método da Quadratura Gaussiana.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Método da Quadratura Gaussiana.Quadratutara",
        "description": "Método da Quadratura Gaussiana.Quadratutara",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\n# Transforma string em função:\ndef stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f",
        "detail": "Método da Quadratura Gaussiana.Quadratutara",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Método da Quadratura Gaussiana.Quadratutara",
        "description": "Método da Quadratura Gaussiana.Quadratutara",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n# Mudança de variável na função f para se encaixar nos limites de integração [-1, 1]:\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\nif __name__ == '__main__':",
        "detail": "Método da Quadratura Gaussiana.Quadratutara",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Método da Quadratura Gaussiana.Quadratutara",
        "description": "Método da Quadratura Gaussiana.Quadratutara",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\nif __name__ == '__main__':\n    import math as math\n    # Listas de pontos e pesos para quadratura gaussiana:\n    from NodesAndWeights import *\n    # Exemplo 01:\n    funcs = ['math.exp(-x**2)', 'math.exp(x)*math.sin(x)/(1+x**2)', 'math.cos(-x**2/3)', 'math.log(math.sqrt(1+x**2))', '(x+1/x)**2']",
        "detail": "Método da Quadratura Gaussiana.Quadratutara",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "def f(x): \n    return pi*x - exp(x)\ndef aproximateDerivative(x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "def aproximateDerivative(x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nvetor = [1, 3, 5]",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "def secante(x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nvetor = [1, 3, 5]\nx0 = 0.83824\nx1 = 2.05516",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "vetor = [1, 3, 5]\nx0 = 0.83824\nx1 = 2.05516\nfor n in vetor:\n    secante(x1, x0, n)",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "x0 = 0.83824\nx1 = 2.05516\nfor n in vetor:\n    secante(x1, x0, n)",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "Método da Secante.secante",
        "description": "Método da Secante.secante",
        "peekOfCode": "x1 = 2.05516\nfor n in vetor:\n    secante(x1, x0, n)",
        "detail": "Método da Secante.secante",
        "documentation": {}
    },
    {
        "label": "euler",
        "kind": 2,
        "importPath": "Método de Euler para ED's.EulerFirstOrder",
        "description": "Método de Euler para ED's.EulerFirstOrder",
        "peekOfCode": "def euler(f, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        # Calculando x_k+1:\n        x = x0 + k*h\n        # Calculando y_k:\n        y_k = Y[k-1] + f(X[k-1], Y[k-1])*h\n        X.append(x)",
        "detail": "Método de Euler para ED's.EulerFirstOrder",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Método de Extrapolação de Richardson.Richardson",
        "description": "Método de Extrapolação de Richardson.Richardson",
        "peekOfCode": "def richardson(f, x0, h, k):\n    table = []\n    for i in range(k):\n        item = F1(f, x0, h/(2**i))\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)\n            table[j] = new_item\n    return table[0] ",
        "detail": "Método de Extrapolação de Richardson.Richardson",
        "documentation": {}
    },
    {
        "label": "F1",
        "kind": 2,
        "importPath": "Método de Extrapolação de Richardson.Richardson",
        "description": "Método de Extrapolação de Richardson.Richardson",
        "peekOfCode": "def F1(f, x0, h):\n    return (f(x0+h) - f(x0))/h\ndef richardson_alternative(approximations, k):\n    table = []\n    for i in range(k):\n        item = approximations[i]\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)",
        "detail": "Método de Extrapolação de Richardson.Richardson",
        "documentation": {}
    },
    {
        "label": "richardson_alternative",
        "kind": 2,
        "importPath": "Método de Extrapolação de Richardson.Richardson",
        "description": "Método de Extrapolação de Richardson.Richardson",
        "peekOfCode": "def richardson_alternative(approximations, k):\n    table = []\n    for i in range(k):\n        item = approximations[i]\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)\n            table[j] = new_item\n    return table[0]",
        "detail": "Método de Extrapolação de Richardson.Richardson",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.sum",
        "description": "Método de Gauss-Jordan.sum",
        "peekOfCode": "alpha = (53/180)*pi\nbeta = (59/180)*pi\nprint(\"\\nAbout alpha: \")\nprint(\"cos(alpha) =\", cos(alpha).real)\nprint(\"sin(alpha) =\", sin(alpha).real)\nprint(\"\\nAbout beta: \")\nprint(\"cos(beta) =\", cos(beta).real)\nprint(\"sin(beta) =\", sin(beta).real)",
        "detail": "Método de Gauss-Jordan.sum",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.sum",
        "description": "Método de Gauss-Jordan.sum",
        "peekOfCode": "beta = (59/180)*pi\nprint(\"\\nAbout alpha: \")\nprint(\"cos(alpha) =\", cos(alpha).real)\nprint(\"sin(alpha) =\", sin(alpha).real)\nprint(\"\\nAbout beta: \")\nprint(\"cos(beta) =\", cos(beta).real)\nprint(\"sin(beta) =\", sin(beta).real)",
        "detail": "Método de Gauss-Jordan.sum",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "m1 = 3.75\nm2 = 5.8\nm3 = 3.77\ng = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "m2 = 5.8\nm3 = 3.77\ng = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "m3",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "m3 = 3.77\ng = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "g = 9.81\nk1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "k1",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "k1 = 86.26\nk2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "k2",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "k2 = 83.86\nk3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "k3",
        "kind": 5,
        "importPath": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "description": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "peekOfCode": "k3 = 53.42\nprint(m1*g)\nprint(m2*g)\nprint(m3*g)\nprint(k1+k2)\nprint(k3+k2)",
        "detail": "Método de Gauss-Jordan.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "heun",
        "kind": 2,
        "importPath": "Método de Heun.Heun",
        "description": "Método de Heun.Heun",
        "peekOfCode": "def heun(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h, Y[k-1] + m1*h)\n        xk = x0 + k*h\n        yk = Y[k-1] + (h/2)*(m1 + m2)\n        X.append(xk)",
        "detail": "Método de Heun.Heun",
        "documentation": {}
    },
    {
        "label": "lagrange",
        "kind": 2,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "def lagrange(X, Y):\n\tnum = len(X)\n\t# num é o número de pontos\n\tcoeffs = []\n\tfor i in range(num):\n\t\tprod = 1\n\t\tfor j in range(num):\n\t\t\tif(i != j): \n\t\t\t\tprod *= (X[i]-X[j])\n\t\tci = Y[i]/prod",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "def build_poly(X, coeffs):\n\tdef func(x):\n\t\tsoma = 0\n\t\tfor i, ci in enumerate(coeffs):\n\t\t\tprod = ci\n\t\t\tfor j in range(len(coeffs)):\n\t\t\t\tif(i != j): prod *= (x-X[j])\n\t\t\tsoma += prod\n\t\treturn soma\n\treturn func",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tnum",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tnum = len(X)\n\t# num é o número de pontos\n\tcoeffs = []\n\tfor i in range(num):\n\t\tprod = 1\n\t\tfor j in range(num):\n\t\t\tif(i != j): \n\t\t\t\tprod *= (X[i]-X[j])\n\t\tci = Y[i]/prod\n\t\tcoeffs.append(ci)",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tcoeffs",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tcoeffs = []\n\tfor i in range(num):\n\t\tprod = 1\n\t\tfor j in range(num):\n\t\t\tif(i != j): \n\t\t\t\tprod *= (X[i]-X[j])\n\t\tci = Y[i]/prod\n\t\tcoeffs.append(ci)\n\treturn coeffs\n# Essa função constrói e retorna o polinômio de langrange:",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\t\tprod",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\t\tprod = 1\n\t\tfor j in range(num):\n\t\t\tif(i != j): \n\t\t\t\tprod *= (X[i]-X[j])\n\t\tci = Y[i]/prod\n\t\tcoeffs.append(ci)\n\treturn coeffs\n# Essa função constrói e retorna o polinômio de langrange:\ndef build_poly(X, coeffs):\n\tdef func(x):",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\t\tci",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\t\tci = Y[i]/prod\n\t\tcoeffs.append(ci)\n\treturn coeffs\n# Essa função constrói e retorna o polinômio de langrange:\ndef build_poly(X, coeffs):\n\tdef func(x):\n\t\tsoma = 0\n\t\tfor i, ci in enumerate(coeffs):\n\t\t\tprod = ci\n\t\t\tfor j in range(len(coeffs)):",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\t\tsoma",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\t\tsoma = 0\n\t\tfor i, ci in enumerate(coeffs):\n\t\t\tprod = ci\n\t\t\tfor j in range(len(coeffs)):\n\t\t\t\tif(i != j): prod *= (x-X[j])\n\t\t\tsoma += prod\n\t\treturn soma\n\treturn func\n# Apesar de lembrar a função \"main\" de python, a seguinte função separa um pedaço do código em que, caso todo o código seja...\n# ... importado para outro arquivo, este pedaço não será importado:",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\t\t\tprod",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\t\t\tprod = ci\n\t\t\tfor j in range(len(coeffs)):\n\t\t\t\tif(i != j): prod *= (x-X[j])\n\t\t\tsoma += prod\n\t\treturn soma\n\treturn func\n# Apesar de lembrar a função \"main\" de python, a seguinte função separa um pedaço do código em que, caso todo o código seja...\n# ... importado para outro arquivo, este pedaço não será importado:\nif __name__ == \"__main__\":\n\timport numpy as np",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tX",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tX = [2.728, 2.937, 3.202, 3.478, 3.698, 4.069, 4.308, 4.536]\n\tY = [0.681, 0.777, 0.857, 0.918, 0.956, 0.999, 0.967, 0.54]\n\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.scatter(X, Y, color = \"blue\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tY",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tY = [0.681, 0.777, 0.857, 0.918, 0.956, 0.999, 0.967, 0.54]\n\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo01.png\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tcoeffs",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo01.png\")\n\tplt.close()",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tp",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo01.png\")\n\tplt.close()\n\t# Exemplo 2:",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tt",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo01.png\")\n\tplt.close()\n\t# Exemplo 2:\n\tdef f(x):\n\t\treturn e**(cos(x)**2) + e**(-x**2) + log(x, e)\n\tX = [2.603, 5.325, 7.733]",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tpt",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tpt = [p(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo01.png\")\n\tplt.close()\n\t# Exemplo 2:\n\tdef f(x):\n\t\treturn e**(cos(x)**2) + e**(-x**2) + log(x, e)\n\tX = [2.603, 5.325, 7.733]\n\tY = [f(xi) for xi in X]",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tX",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tX = [2.603, 5.325, 7.733]\n\tY = [f(xi) for xi in X]\n\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tY",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tY = [f(xi) for xi in X]\n\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.plot(t, ft, color = \"green\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tcoeffs",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tp",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tp = build_poly(X, coeffs)\n\t#for ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo02.png\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tt",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo02.png\")\n\tplt.close()\n\t# Exemplo 03 (código não fixo):\n\tdef f(x):",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tpt",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tpt = [p(ti) for ti in t]\n\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo02.png\")\n\tplt.close()\n\t# Exemplo 03 (código não fixo):\n\tdef f(x):\n\t\treturn cos(x + sqrt(log(x**2, e)))",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tft",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\tplt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo02.png\")\n\tplt.close()\n\t# Exemplo 03 (código não fixo):\n\tdef f(x):\n\t\treturn cos(x + sqrt(log(x**2, e)))\n\tX = [1.493, 1.665, 1.875, 2.035, 2.141, 2.283, 2.456, 2.641, 2.825, 3.023, 3.268, 3.363, 3.561, 3.728, 3.861, 4.104, 4.256, 4.383, 4.533, 4.682, 4.935]",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tX",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tX = [1.493, 1.665, 1.875, 2.035, 2.141, 2.283, 2.456, 2.641, 2.825, 3.023, 3.268, 3.363, 3.561, 3.728, 3.861, 4.104, 4.256, 4.383, 4.533, 4.682, 4.935]\n\tY = [f(xi) for xi in X]\n\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\tfor ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tY",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tY = [f(xi) for xi in X]\n\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\tfor ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\t#plt.plot(t, ft, color = \"green\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tcoeffs",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tcoeffs = lagrange(X, Y)\n\tp = build_poly(X, coeffs)\n\tfor ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\t#plt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tp",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tp = build_poly(X, coeffs)\n\tfor ci in coeffs: print(f'{ci:.20f},') \n\t# for xi in X: print(f'{p(xi)}')\n\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\t#plt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo03.png\")",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tt",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tt = np.linspace(min(X), max(X), 100)\n\tpt = [p(ti) for ti in t]\n\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\t#plt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo03.png\")\n\tplt.close()\n# Neste método de interpolação, para uma lista de pontos (geral): \n#",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\tpt",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\tpt = [p(ti) for ti in t]\n\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\t#plt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo03.png\")\n\tplt.close()\n# Neste método de interpolação, para uma lista de pontos (geral): \n#\n# (x0, y0), (x1, y1), ..., (xn-1, yn-1)",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "\t#ft",
        "kind": 5,
        "importPath": "Método de Interpolação de Lagrange.Langrange",
        "description": "Método de Interpolação de Lagrange.Langrange",
        "peekOfCode": "\t#ft = [f(ti) for ti in t]\n\tplt.plot(t, pt, color = \"red\")\n\t#plt.plot(t, ft, color = \"green\")\n\tplt.scatter(X, Y, color = \"blue\")\n\tplt.savefig(\"Exemplo03.png\")\n\tplt.close()\n# Neste método de interpolação, para uma lista de pontos (geral): \n#\n# (x0, y0), (x1, y1), ..., (xn-1, yn-1)\n#",
        "detail": "Método de Interpolação de Lagrange.Langrange",
        "documentation": {}
    },
    {
        "label": "spline",
        "kind": 2,
        "importPath": "Método de Interpolação Spline Cúbico.SplineCúbico",
        "description": "Método de Interpolação Spline Cúbico.SplineCúbico",
        "peekOfCode": "def spline(X, Y):\n    n = len(X)\n    \"\"\"\n    Retorna todos os coeficiente de todos os polinômios, ou seja,\n    todos os ak, bk, ck, dk\n    \"\"\"\n    # Matriz com os valores de cada ak\n    A = [yi for yi in Y]\n    # Matriz com os valores de cada hk para k = 0, 1, 2, ..., n-1\n    H = []",
        "detail": "Método de Interpolação Spline Cúbico.SplineCúbico",
        "documentation": {}
    },
    {
        "label": "build_poly_dict",
        "kind": 2,
        "importPath": "Método de Interpolação Spline Cúbico.SplineCúbico",
        "description": "Método de Interpolação Spline Cúbico.SplineCúbico",
        "peekOfCode": "def build_poly_dict(A, B, C, D, X):\n    poly_dict = {}\n    n = len(X)\n    for i in range(n-1):\n        eq = f'{A[i]}{B[i]:+}*(x-{X[i]}){C[i]:+}*(x-{X[i]})**2{D[i]:+}*(x-{X[i]})**3'\n        poly_dict[i] = {'eq': eq, 'domain': [X[i], X[i+1]]}\n    return poly_dict\nif __name__ == '__main__':\n    import matplotlib.pyplot as plt\n    from math import *",
        "detail": "Método de Interpolação Spline Cúbico.SplineCúbico",
        "documentation": {}
    },
    {
        "label": "vandermonde",
        "kind": 2,
        "importPath": "Método de Interpolção Polinômial.Interpolação",
        "description": "Método de Interpolção Polinômial.Interpolação",
        "peekOfCode": "def vandermonde(coords_X, coords_Y):\n    X = []\n    Y = coords_Y\n    n = len(coords_X)\n    for xi in coords_X:\n        # Cada linha é formada da seguinte forma: 1 + xi**1 + xi**2 + ... + xi**(n-1)\n        row = [1] + [xi**k for k in range(1, n)]\n        # Obs.: lembre-se que a função range começa no elemento esquerdo do argumento mas...\n        # ... termina no elemento direito do argumento - 1.\n        X.append(row)",
        "detail": "Método de Interpolção Polinômial.Interpolação",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Método de Interpolção Polinômial.Interpolação",
        "description": "Método de Interpolção Polinômial.Interpolação",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        soma = coeffs[0]                         # soma = a0\n        for i, ci in enumerate(coeffs[1:], 1):   # coeffs[1:] pois já adicionamos o elemento a0*x**0\n            soma += ci*x**i                      # enumerate permite usar o índice do elemento no \"for\" junto ao próprio elemento...\n        return soma                              # ... e setamos tal contador pra começar em 1 (por isso \"(coeffs[1:], 1)\", para...\n    return func                                  # ... usar i como expoente).\n# Apesar de lembrar a função \"main\" de python, a seguinte função separa um pedaço do código em que, caso todo o código seja...\n# ... importado para outro arquivo, este pedaço não será importado:\nif __name__ == '__main__':",
        "detail": "Método de Interpolção Polinômial.Interpolação",
        "documentation": {}
    },
    {
        "label": "diff_div",
        "kind": 2,
        "importPath": "Método de Iterpolação das Diferenças Divididas.DiferençasDivididas",
        "description": "Método de Iterpolação das Diferenças Divididas.DiferençasDivididas",
        "peekOfCode": "def diff_div(X, Y):\n    # Esta cópia de Y irá mudar a cada iteração:\n    Y_table = [yi for yi in Y]  \n    # Sabemos que o primeiro coeficiente, a0, é sempre igual a y0, assim temos:\n    coeffs = [Y[0]] + [0 for yi in Y[1:]]   \n    n = len(coeffs)\n    # Para cada coluna (lembrando que a 1º coluna já é dada):\n    for i in range(n-1):\n        # Para cada elemento da coluna (lembrando que a0 já foi calculcado):\n        for j in range(n - i - 1):",
        "detail": "Método de Iterpolação das Diferenças Divididas.DiferençasDivididas",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Método de Iterpolação das Diferenças Divididas.DiferençasDivididas",
        "description": "Método de Iterpolação das Diferenças Divididas.DiferençasDivididas",
        "peekOfCode": "def build_poly(X, coeffs):\n    def func(x):\n        sum = 0\n        for i, ci in enumerate(coeffs):\n            prod = ci\n            # Se i = 0 o loop não itera:\n            for j in range(i):\n                prod *= (x - X[j])\n            sum += prod\n        return sum",
        "detail": "Método de Iterpolação das Diferenças Divididas.DiferençasDivididas",
        "documentation": {}
    },
    {
        "label": "build_F",
        "kind": 2,
        "importPath": "Método de Newton para sistemas não-lineares.SystemNewton",
        "description": "Método de Newton para sistemas não-lineares.SystemNewton",
        "peekOfCode": "def build_F(functions, A):\n    F = []\n    for f in functions:\n        row = [f(A)]\n        F.append(row)\n    return F\n# Função que recebe lista de derivadas e valores e monta a matriz de derivadas F' (Jacobiano) invertida:\ndef build_J_inverse(derivatives, A):\n    J = []\n    for i, num in enumerate(derivatives):",
        "detail": "Método de Newton para sistemas não-lineares.SystemNewton",
        "documentation": {}
    },
    {
        "label": "build_J_inverse",
        "kind": 2,
        "importPath": "Método de Newton para sistemas não-lineares.SystemNewton",
        "description": "Método de Newton para sistemas não-lineares.SystemNewton",
        "peekOfCode": "def build_J_inverse(derivatives, A):\n    J = []\n    for i, num in enumerate(derivatives):\n        row = []\n        for d in derivatives[i]:\n            row.append(d(A))\n        J.append(row)\n    return np.linalg.inv(J)\ndef iterations(A, J_inverse, F):\n    B = -np.dot(J_inverse, F)",
        "detail": "Método de Newton para sistemas não-lineares.SystemNewton",
        "documentation": {}
    },
    {
        "label": "iterations",
        "kind": 2,
        "importPath": "Método de Newton para sistemas não-lineares.SystemNewton",
        "description": "Método de Newton para sistemas não-lineares.SystemNewton",
        "peekOfCode": "def iterations(A, J_inverse, F):\n    B = -np.dot(J_inverse, F)\n    X = A - B\n    return X\n# Note que A é a solução inicial:\nif __name__ == '__main__':\n    def f1(X):\n        return X[0]*X[0] + X[1]*X[1] - 5\n    def f1x0(X):\n        return 2*X[0]",
        "detail": "Método de Newton para sistemas não-lineares.SystemNewton",
        "documentation": {}
    },
    {
        "label": "ralston",
        "kind": 2,
        "importPath": "Método de Ralston.Ralston",
        "description": "Método de Ralston.Ralston",
        "peekOfCode": "def ralston(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + (3/4)*h, Y[k-1] + (3/4)*h*m1)\n        xk = x0 + k*h\n        yk = Y[k-1] + (h/3)*(m1 + 2*m2)\n        X.append(xk)",
        "detail": "Método de Ralston.Ralston",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Método de Romberg.Romberg",
        "description": "Método de Romberg.Romberg",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Método de Romberg.Romberg",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Método de Romberg.Romberg",
        "description": "Método de Romberg.Romberg",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\nif __name__ == '__main__':\n    from math import *",
        "detail": "Método de Romberg.Romberg",
        "documentation": {}
    },
    {
        "label": "rungeKutta",
        "kind": 2,
        "importPath": "Método de Runge Kutta (de ordem 2).RungeKutta (ordem 2)",
        "description": "Método de Runge Kutta (de ordem 2).RungeKutta (ordem 2)",
        "peekOfCode": "def rungeKutta(df, x0, y0, h, n, b = 1):\n    \"\"\"\"\"\n    Método de Runge-Kutta geral de ordem 2\n    Por padrão usa o método do ponto médio de Euler que corresponde a b = 1\n    b = 1/2 corresponde ao método de Heun\n    b = 2/3 corresponde ao método de Ralston\n    \"\"\"\"\"\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]",
        "detail": "Método de Runge Kutta (de ordem 2).RungeKutta (ordem 2)",
        "documentation": {}
    },
    {
        "label": "rungeKutta",
        "kind": 2,
        "importPath": "Método de Runge Kutta (de ordem 4).RungeKutta (ordem 4)",
        "description": "Método de Runge Kutta (de ordem 4).RungeKutta (ordem 4)",
        "peekOfCode": "def rungeKutta(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        m1 = df(x0, y0)\n        m2 = df(x0 + h/2, y0 + m1*h/2)\n        m3 = df(x0 + h/2, y0 + m2*h/2)\n        m4 = df(x0 + h, y0 + m3*h)\n        x0 += h",
        "detail": "Método de Runge Kutta (de ordem 4).RungeKutta (ordem 4)",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Método de Simpson.Simpson",
        "description": "Método de Simpson.Simpson",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Método de Simpson.Simpson",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "Método de Simpson.Simpson",
        "description": "Método de Simpson.Simpson",
        "peekOfCode": "def simpson_alternative(X, Y):\n    n = len(X)\n    sum = 0\n    for k in range(2, n, 2):\n        sum += (X[k-1] - X[k-2])/3 * (Y[k-2] + 4*Y[k-1] + Y[k])\n    return sum\nif __name__ == '__main__':\n    from math import *\n    # Exemplo 01:\n    a = -1.078",
        "detail": "Método de Simpson.Simpson",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "def g(x):\n    # Python converte para complex ao usar raiz quadrada\n    c = ((3 * pow(x, 4) + 2 * pow(x, 2) + 3) / (4 * pow(x, 3) + 4 * x - 1))\n    return c\ndef f(x):\n   return x**2\ndef pontoFixo(g, x, n):\n    for i in range(n):\n        x_n = g(x)\n        x = x_n",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "def f(x):\n   return x**2\ndef pontoFixo(g, x, n):\n    for i in range(n):\n        x_n = g(x)\n        x = x_n\n    print(\"%.17f,\"%(x))\nx_0 = 1.09298\nvetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "pontoFixo",
        "kind": 2,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "def pontoFixo(g, x, n):\n    for i in range(n):\n        x_n = g(x)\n        x = x_n\n    print(\"%.17f,\"%(x))\nx_0 = 1.09298\nvetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:\n    pontoFixo(g, x_0, i)",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "x_0 = 1.09298\nvetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:\n    pontoFixo(g, x_0, i)",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Método do Ponto Fixo.pontoFixo",
        "description": "Método do Ponto Fixo.pontoFixo",
        "peekOfCode": "vetor = [1, 2, 3, 4, 5, 6, 7, 8]\nfor i in vetor:\n    pontoFixo(g, x_0, i)",
        "detail": "Método do Ponto Fixo.pontoFixo",
        "documentation": {}
    },
    {
        "label": "eulerPontoMedio",
        "kind": 2,
        "importPath": "Método do Ponto Médio de Euler.PontoMédioEuler",
        "description": "Método do Ponto Médio de Euler.PontoMédioEuler",
        "peekOfCode": "def eulerPontoMedio(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + (h/2), Y[k-1] + (h/2)*m1)\n        xk = x0 + k*h\n        yk = Y[k-1] + h*m2\n        X.append(xk)",
        "detail": "Método do Ponto Médio de Euler.PontoMédioEuler",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Método dos Trapézios.Trapézios",
        "description": "Método dos Trapézios.Trapézios",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef trapeze_sum_variable_subinterval(f, X):\n    n = len(X)",
        "detail": "Método dos Trapézios.Trapézios",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_variable_subinterval",
        "kind": 2,
        "importPath": "Método dos Trapézios.Trapézios",
        "description": "Método dos Trapézios.Trapézios",
        "peekOfCode": "def trapeze_sum_variable_subinterval(f, X):\n    n = len(X)\n    sum = 0\n    for k in range(1, n):\n        base = X[k] - X[k-1]\n        sum += base*(f(X[k]) + f(X[k-1]))/2\n    return sum\nif __name__ == '__main__':\n    from math import *\n    # Exemplo 01:",
        "detail": "Método dos Trapézios.Trapézios",
        "documentation": {}
    },
    {
        "label": "trapeze_double_sum",
        "kind": 2,
        "importPath": "Método dos Trapézios.TrapéziosIntegraisDuplas",
        "description": "Método dos Trapézios.TrapéziosIntegraisDuplas",
        "peekOfCode": "def trapeze_double_sum(f, a, b, c, d, m, n):\n    # Bases dos trapézios (subintervalos) nas direções de x e de y respectivamente:\n    h1 = (b-a)/m\n    h2 = (d-c)/n\n    # Somatórios da fórmula:\n    sum_corners = 0\n    sum_const_Y_edges = 0\n    sum_const_X_edges = 0\n    sum_inside = 0\n    # Calculando sum_corners:",
        "detail": "Método dos Trapézios.TrapéziosIntegraisDuplas",
        "documentation": {}
    },
    {
        "label": "diff_fin",
        "kind": 2,
        "importPath": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "description": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "peekOfCode": "def diff_fin(X, x0, k):\n    n = len(X)\n    A = []\n    B = []\n    for i in range(n):\n        row = []\n        for xi in X:\n            row.append(xi**i)\n        A.append(row)\n        if i < k:",
        "detail": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "documentation": {}
    },
    {
        "label": "get_aprox",
        "kind": 2,
        "importPath": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "description": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "peekOfCode": "def get_aprox(X, coeffs, f):\n    sum = 0\n    for xi, ci in zip(X, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef build_taylor(X, x0, f, n):\n    def p(x):\n        poly = f(x0)\n        for i in range(n):\n            coeffs = diff_fin(X, x0, i+1)",
        "detail": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "documentation": {}
    },
    {
        "label": "build_taylor",
        "kind": 2,
        "importPath": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "description": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "peekOfCode": "def build_taylor(X, x0, f, n):\n    def p(x):\n        poly = f(x0)\n        for i in range(n):\n            coeffs = diff_fin(X, x0, i+1)\n            poly += get_aprox(X, coeffs, f) * (x - x0)**(i+1) / factorial(i+1)\n        return poly\n    return p\nif __name__ == '__main__':\n    # Exemplo 01:",
        "detail": "Métodos das Diferenças Finitas.Diferenças Finitas",
        "documentation": {}
    },
    {
        "label": "diff_div",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def diff_div(X, Y):\n    # Esta cópia de Y irá mudar a cada iteração:\n    Y_table = [yi for yi in Y]  \n    # Sabemos que o primeiro coeficiente, a0, é sempre igual a y0, assim temos:\n    coeffs = [Y[0]] + [0 for yi in Y[1:]]   \n    n = len(coeffs)\n    # Para cada coluna (lembrando que a 1º coluna já é dada):\n    for i in range(n-1):\n        # Para cada elemento da coluna (lembrando que a0 já foi calculcado):\n        for j in range(n - i - 1):",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def build_poly(X, coeffs):\n    def func(x):\n        sum = 0\n        for i, ci in enumerate(coeffs):\n            prod = ci\n            # Se i = 0 o loop não itera:\n            for j in range(i):\n                prod *= (x - X[j])\n            sum += prod\n        return sum",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef aprox_coeffs(func_list, f, a, b, n):\n    A = []",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n\"\"\"\nDentre todos os polinômios de grau n que interpolam y = f(x) numa lista de n+1 pontos no intervalo [-1, 1],\naquele que interpola nas raízes do polinômio T_n+1(x) é o polinômio que melhor se aproxima da função y = f(x),\nou seja, esse polinômio minimiza a seguinte função erro:\n    erro(P) = max|f(x)-P(x)| para -1 <= x <= 1, sendo P um polinômio\n\"\"\"",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "changeToChebyInterval",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def changeToChebyInterval(f, a, b):\n    def F(u):\n        return f(((b-a)/2) * u + (a+b)/2)\n    return F\ndef changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "changeFromChebyInterval",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "getChebyPoly",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    for _ in range(1, n):",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "getChebyPolyList",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def getChebyPolyList(n):\n    \"\"\"\n    Retorna a lista do n primeiros polinômios de chebyshev como objetos de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    for i in range(2, n):\n        t_n = 2*T[i-1]*x - T[i-2]",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "chebyRoots",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def chebyRoots(n):\n    \"\"\"\n    Retorna as n raízes do e-nésimo polinômio de chebyshev.\n    \"\"\"\n    roots = []\n    for k in range(1, n+1):\n        x_k = cos((2*k-1)*pi/(2*n))\n        roots.append(x_k)\n    return roots\ndef stringToFunc(string):",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Polinômios de Chebyshev.Cheby",
        "description": "Polinômios de Chebyshev.Cheby",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return x * sin(-6 * x**2)\n    a = -1\n    b = 1",
        "detail": "Polinômios de Chebyshev.Cheby",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef aprox_coeffs(func_list, f, a, b, n):\n    A = []",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs_ort",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def aprox_coeffs_ort(func_list, f, a, b, n):\n    coeffs = []\n    for fi in func_list:\n        ck = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)/trapeze_sum(lambda x: fi(x)*fi(x), a, b, n)\n        coeffs.append(ck)\n    return coeffs\ndef build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n# Transforma string em função:\ndef stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n# Transforma expressões com símbolos em funções:",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n# Transforma expressões com símbolos em funções:\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):\n(Anotação: fazer as funções de maneira não recursiva usando a biblioteca sympy)\n\"\"\"\ndef legendre(x, n):\n    if n == 0:\n        return 1",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "legendre",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def legendre(x, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    else:\n        return ((2 * n - 1) * x * legendre(x, n - 1) - (n - 1) * legendre(x, n - 2)) / n\ndef optimized_legendre(n):\n    \"\"\"\n    Função que gera a lista do primeiro até o e-nésimo polinômio de Legendre de maneira iterativa",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "optimized_legendre",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def optimized_legendre(n):\n    \"\"\"\n    Função que gera a lista do primeiro até o e-nésimo polinômio de Legendre de maneira iterativa\n    Obs.: x deve ser um elemento da classe symbol da biblioteca sympy.\n    \"\"\"\n    x = symbols('x')\n    P = [1, x]\n    P_func_list = [lambda x: 1, lambda x: x]\n    for i in range(2, n+1):\n        p_i = ((2 * i - 1) * x * P[1] - (i - 1) * P[0]) / i",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "build_legendre_polynomial",
        "kind": 2,
        "importPath": "Polinômios de Legendre.Legendre",
        "description": "Polinômios de Legendre.Legendre",
        "peekOfCode": "def build_legendre_polynomial(n):\n    def p(x):\n        return legendre(x, n)\n    return p\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return  x * sin(-6 * x**2)\n    a = -1\n    b = 1",
        "detail": "Polinômios de Legendre.Legendre",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Exponencial.Regressão Exponencial",
        "description": "Regressão Exponencial.Regressão Exponencial",
        "peekOfCode": "def calc_coeffs(X, Y):\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(2):\n        row = []\n        for j in range(2):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)\n            row.append(sum)",
        "detail": "Regressão Exponencial.Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Exponencial.Regressão Exponencial",
        "description": "Regressão Exponencial.Regressão Exponencial",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\ndef calc_exp_coeffs(X, Y, expoent):\n    const = min(Y)\n    if(const <= 0):",
        "detail": "Regressão Exponencial.Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "calc_exp_coeffs",
        "kind": 2,
        "importPath": "Regressão Exponencial.Regressão Exponencial",
        "description": "Regressão Exponencial.Regressão Exponencial",
        "peekOfCode": "def calc_exp_coeffs(X, Y, expoent):\n    const = min(Y)\n    if(const <= 0):\n        const = abs(const) + 1\n    else:\n        const = 0\n    linearized_Y = [log(yi + const, expoent) for yi in Y]\n    coeffs = calc_coeffs(X, linearized_Y)\n    # Considerando a equação exponencial na forma y = a.k^(b.x) - c\n    a = expoent**(coeffs[0])",
        "detail": "Regressão Exponencial.Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "build_exp",
        "kind": 2,
        "importPath": "Regressão Exponencial.Regressão Exponencial",
        "description": "Regressão Exponencial.Regressão Exponencial",
        "peekOfCode": "def build_exp(coeffs):\n    def f(x):\n        return coeffs['a']*coeffs['k']**(coeffs['b']*x) - coeffs['c']\n    return f\ndef calc_exp_coeffs_inverse(X, Y, expoent):\n    const = min(X)\n    if(const <= 0):\n        const = abs(const) + 1\n    else:\n        const = 0",
        "detail": "Regressão Exponencial.Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "calc_exp_coeffs_inverse",
        "kind": 2,
        "importPath": "Regressão Exponencial.Regressão Exponencial",
        "description": "Regressão Exponencial.Regressão Exponencial",
        "peekOfCode": "def calc_exp_coeffs_inverse(X, Y, expoent):\n    const = min(X)\n    if(const <= 0):\n        const = abs(const) + 1\n    else:\n        const = 0\n    linearized_X = [log(xi + const, expoent) for xi in X]\n    coeffs = calc_coeffs(linearized_X, Y)\n    b = coeffs[0]\n    a = coeffs[1]",
        "detail": "Regressão Exponencial.Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "build_exp_inverse",
        "kind": 2,
        "importPath": "Regressão Exponencial.Regressão Exponencial",
        "description": "Regressão Exponencial.Regressão Exponencial",
        "peekOfCode": "def build_exp_inverse(coeffs):\n    def f(x):\n        return coeffs['b'] + coeffs['a']*log(x+coeffs['k'], coeffs['m'])\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.0202, 0.0914, 0.1416, 0.1667, 0.2266, 0.3154, 0.335, 0.4089, 0.4679, 0.5171, 0.5905, 0.6387, 0.7131, 0.7527, 0.8102, 0.8425, 0.8921, 0.9473, 1.0221, 1.0796, 1.1121, 1.1826, 1.2454, 1.3067, 1.3656, 1.4166, 1.4982, 1.5326, 1.5562, 1.6396, 1.7149, 1.7656, 1.8161, 1.8879, 1.9055, 1.9838]\n    Y = [4.397, 5.1077, 6.5344, 7.5504, 4.8005, 5.7035, 5.1387, 5.9875, 6.831, 7.3067, 7.7048, 7.2332, 8.953, 9.0576, 10.0124, 9.405, 11.3052, 12.3553, 13.0991, 12.6969, 13.5873, 15.7953, 15.1653, 16.9946, 18.6564, 18.8157, 21.0904, 21.7505, 22.4597, 24.6642, 25.8545, 27.892, 30.2306, 34.2837, 33.172, 36.0403]\n    values = [0.2608, 0.3236, 0.5979, 1.9546, 1.96]\n    expoent = 2",
        "detail": "Regressão Exponencial.Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Linear.Regressão Linear",
        "description": "Regressão Linear.Regressão Linear",
        "peekOfCode": "def calc_coeffs(X, Y):\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(2):\n        row = []\n        for j in range(2):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)\n            row.append(sum)",
        "detail": "Regressão Linear.Regressão Linear",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Linear.Regressão Linear",
        "description": "Regressão Linear.Regressão Linear",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [x for x in range(0, 100)]",
        "detail": "Regressão Linear.Regressão Linear",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "description": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "peekOfCode": "def calc_coeffs(X, Y, degree = 1):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "description": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y):\n    const_Y= min(Y)\n    if(const_Y <= 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "description": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "peekOfCode": "def build_non_linear(coeffs):\n    def f(x):\n        return ((coeffs['a'] + sqrt(x+coeffs['k']))/(coeffs['b']*sqrt(x+coeffs['k'])))**2 - coeffs['c']\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.7708, 1.6674, 2.3526, 2.9878, 4.1301, 4.6131, 5.6179, 6.3146, 7.0627, 8.0253, 8.8753, 9.421]\n    Y = [6.6604, 3.6621, 2.7577, 2.3334, 1.8311, 1.6729, 1.4886, 1.3931, 1.2011, 1.2012, 1.206, 1.0941]\n    values = [1.1859, 4.6267, 5.8824]\n    coeffs = calc_non_linear_coeffs(X, Y)     ",
        "detail": "Regressão Não Linear Aleatória.Regressão Não Linear Aleatória",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória.Regressão Temp",
        "description": "Regressão Não Linear Aleatória.Regressão Temp",
        "peekOfCode": "def calc_coeffs(X, Y, degree = 1):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "Regressão Não Linear Aleatória.Regressão Temp",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória.Regressão Temp",
        "description": "Regressão Não Linear Aleatória.Regressão Temp",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y):\n    const_Y = min(Y)\n    if(const_Y <= 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Não Linear Aleatória.Regressão Temp",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Regressão Não Linear Aleatória.Regressão Temp",
        "description": "Regressão Não Linear Aleatória.Regressão Temp",
        "peekOfCode": "def build_non_linear(coeffs):\n    def f(x):\n        return ((coeffs['a']/coeffs['b'])*(1/sqrt(x + coeffs['k'])) + 1/coeffs['b'])**2 - coeffs['c']\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return ((1 + sqrt(x)))**2/((1*sqrt(x)))**2\n    X = [xi for xi in range(1, 100, 4)]\n    Y = [f(xi) for xi in X]",
        "detail": "Regressão Não Linear Aleatória.Regressão Temp",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Polinômial.Regressão Polinômial",
        "description": "Regressão Polinômial.Regressão Polinômial",
        "peekOfCode": "def calc_coeffs(X, Y, degree):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "Regressão Polinômial.Regressão Polinômial",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Polinômial.Regressão Polinômial",
        "description": "Regressão Polinômial.Regressão Polinômial",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\nif __name__ == '__main__':\n    # Note: o número de pontos do polinômio deve ser estritamente maior que o grau do polinômio, caso contrário...\n    # ... haverão infinitas soluções",
        "detail": "Regressão Polinômial.Regressão Polinômial",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Potêncial.Regressão Potêncial",
        "description": "Regressão Potêncial.Regressão Potêncial",
        "peekOfCode": "def calc_coeffs(X, Y):\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(2):\n        row = []\n        for j in range(2):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)\n            row.append(sum)",
        "detail": "Regressão Potêncial.Regressão Potêncial",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Potêncial.Regressão Potêncial",
        "description": "Regressão Potêncial.Regressão Potêncial",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\ndef calc_pot_coeffs(X, Y):\n    const_Y= min(Y)\n    if(const_Y <= 0):",
        "detail": "Regressão Potêncial.Regressão Potêncial",
        "documentation": {}
    },
    {
        "label": "calc_pot_coeffs",
        "kind": 2,
        "importPath": "Regressão Potêncial.Regressão Potêncial",
        "description": "Regressão Potêncial.Regressão Potêncial",
        "peekOfCode": "def calc_pot_coeffs(X, Y):\n    const_Y= min(Y)\n    if(const_Y <= 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Potêncial.Regressão Potêncial",
        "documentation": {}
    },
    {
        "label": "build_pot",
        "kind": 2,
        "importPath": "Regressão Potêncial.Regressão Potêncial",
        "description": "Regressão Potêncial.Regressão Potêncial",
        "peekOfCode": "def build_pot(coeffs):\n    def f(x):\n        return coeffs['a']*(x + coeffs['k'])**(coeffs['b']) - coeffs['c']\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.5126, 0.573, 0.6654, 0.7057, 0.7871, 0.839, 0.8638, 0.9288, 0.9927, 1.0747, 1.1316, 1.156, 1.2296, 1.2843, 1.3793, 1.4231, 1.46, 1.563, 1.5992, 1.6487, 1.7329, 1.7565, 1.8323, 1.8917, 1.9537, 2.0237, 2.0884, 2.1108, 2.1873, 2.267, 2.3021, 2.3839, 2.4503, 2.5089, 2.5705, 2.6377, 2.6636, 2.7247, 2.7873, 2.8298, 2.9127, 2.9983]\n    Y = [0.2227, 1.1283, 0.1645, 0.0203, 0.7443, 0.8442, 0.6032, 0.9433, 1.2406, 3.8341, 2.0135, 2.8183, 3.2389, 3.341, 4.6893, 5.6199, 5.4493, 7.2853, 8.3757, 8.8673, 10.8298, 10.9226, 13.956, 15.4451, 17.0213, 19.808, 22.6852, 23.4231, 27.0152, 30.3488, 32.3376, 36.9758, 41.4058, 44.8341, 49.4973, 54.9113, 56.9, 61.2, 67.2643, 71.216, 78.7952, 89.2234]\n    values = [0.6996, 0.8847, 2.1356, 2.7445, 2.9708]\n    coeffs = calc_pot_coeffs(X, Y)     ",
        "detail": "Regressão Potêncial.Regressão Potêncial",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "description": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "peekOfCode": "def calc_coeffs(X, Y):\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(2):\n        row = []\n        for j in range(2):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)\n            row.append(sum)",
        "detail": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "description": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\n# def calc_non_linear_coeffs(X, Y):\n#     const_Y= min(Y)\n#     if(const_Y <= 0):",
        "detail": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs_pow_x",
        "kind": 2,
        "importPath": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "description": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "peekOfCode": "def calc_non_linear_coeffs_pow_x(X, Y, pot=1):\n    const_Y= min(Y)\n    if(const_Y <= 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "description": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "peekOfCode": "def build_non_linear(coeffs):\n    def f(x):\n        # y = (a.(x+k))/((x+k)+b) - c\n        return coeffs['a']*(x+coeffs['k'])**coeffs['pot']/((x+coeffs['k'])**coeffs['pot'] + coeffs['b']) - coeffs['c']\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [1.3312, 1.7481, 2.1012, 2.5289, 3.0234, 3.3364, 3.9986, 4.3035, 4.9369, 5.4698, 5.693, 6.1623, 6.6749, 6.9567, 7.4203, 7.9901, 8.5101, 8.8578, 9.4592, 10.027, 10.0991, 10.7873, 11.1146, 11.5225, 12.0229, 12.4454, 12.9252, 13.4199, 13.9274, 14.4862, 15.0232, 15.3362, 15.4886, 16.0153, 16.401, 17.0037, 17.2934, 17.815, 18.6172, 19.0669, 19.1108, 19.5719]\n    Y = [0.7456, 0.8493, 0.9207, 1.003, 1.0894, 1.1599, 1.2507, 1.3055, 1.3711, 1.3712, 1.3721, 1.4181, 1.4854, 1.5204, 1.5009, 1.5196, 1.574, 1.5769, 1.5932, 1.6087, 1.655, 1.6485, 1.6935, 1.6596, 1.6944, 1.7204, 1.7011, 1.7408, 1.7502, 1.7778, 1.7451, 1.7755, 1.7659, 1.7831, 1.8648, 1.7744, 1.8255, 1.752, 1.8105, 1.8518, 1.8329, 1.7588]\n    values = [1.6152, 5.3589, 6.1014, 9.253, 9.4466]",
        "detail": "Regressão Potêncial de Expoente Negativo.Regressão Potêncial de Expoente Negativo",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "description": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "peekOfCode": "def calc_coeffs(X, Y):\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(2):\n        row = []\n        for j in range(2):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)\n            row.append(sum)",
        "detail": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "description": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\ndef calc_non_linear_coeffs(X, Y, base):\n    const_Y= min(Y)\n    if(const_Y <= 0):",
        "detail": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "description": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y, base):\n    const_Y= min(Y)\n    if(const_Y <= 0):\n        const_Y = -1*(abs(const_Y) + 1)\n    else:\n        const_Y = 0\n    const_X = min(X)\n    if(const_X <= 0):\n        const_X = abs(const_X) + 1\n    else:",
        "detail": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "description": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "peekOfCode": "def build_non_linear(coeffs):\n    def f(x):\n        # y = a.(x+k).[m^(b.x)]\n        return coeffs['a']*(x+coeffs['k'])*(coeffs['m'])**(coeffs['b']*x)\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.133, 1.1277, 1.8076, 2.7734, 3.9582, 4.3861, 5.8489, 6.6472, 7.4997, 7.6521, 8.6918, 9.5471]\n    Y = [0.6338, 4.0986, 5.5934, 6.7477, 7.2089, 7.1567, 6.6551, 6.2211, 5.7261, 5.5752, 4.9273, 4.367]\n    values = [1.528, 8.3326, 8.454]",
        "detail": "Regressão Potêncial e Exponencial.Regressão Potêncial e Exponencial",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Séries de Fourier.Fourier",
        "description": "Séries de Fourier.Fourier",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef fourier_coeffs(f, num_coeffs, num_intervals):\n    \"\"\"",
        "detail": "Séries de Fourier.Fourier",
        "documentation": {}
    },
    {
        "label": "fourier_coeffs",
        "kind": 2,
        "importPath": "Séries de Fourier.Fourier",
        "description": "Séries de Fourier.Fourier",
        "peekOfCode": "def fourier_coeffs(f, num_coeffs, num_intervals):\n    \"\"\"\n    Retorna os coeficientes a_n's, b_n's e c da série de fourier \n    para uma determinada função f(x)\n    \"\"\"   \n    a = -pi\n    b = pi\n    A = []\n    B = []\n    c = (1/(2*pi))*trapeze_sum(f, a, b, num_intervals)",
        "detail": "Séries de Fourier.Fourier",
        "documentation": {}
    },
    {
        "label": "build_fourier",
        "kind": 2,
        "importPath": "Séries de Fourier.Fourier",
        "description": "Séries de Fourier.Fourier",
        "peekOfCode": "def build_fourier(A, B, c):\n    \"\"\"\n    Monta a série de fourier a partir dos coeficientes a_n's, b_n's e c\n    calculados para um determinada função f(x)\n    \"\"\"\n    def f(x):\n        return c + sum(a_n*cos(n*x) + b_n*sin(n*x) for n, (a_n, b_n) in enumerate(zip(A, B), 1))\n    return f\nif __name__ == \"__main__\":\n    def f(x):",
        "detail": "Séries de Fourier.Fourier",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "Trabalho 01.Q22",
        "description": "Trabalho 01.Q22",
        "peekOfCode": "def function(x):\n    return exp(5*x)-2\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):",
        "detail": "Trabalho 01.Q22",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q22",
        "description": "Trabalho 01.Q22",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        #print(\"x = %.17f na %i iteração\" % (x, i))",
        "detail": "Trabalho 01.Q22",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q22",
        "description": "Trabalho 01.Q22",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): return\n    i = 1\n    while(1):\n        x = falsePositionAux(f, a, b)\n        #print(\"x = %.17f na %i iteração\" % (x, i))\n        if(i >= n): \n            break\n        if(f(a)*f(x) < 0): \n            b = x",
        "detail": "Trabalho 01.Q22",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q22",
        "description": "Trabalho 01.Q22",
        "peekOfCode": "vetor = [1 , 25, 50, 100, 200, 400, 800, 1600, 3200, 4800, 6400, 8000, 10000]\nfor i in vetor:\n    falsePosition(function, -0.993624, 1.9528124, i)",
        "detail": "Trabalho 01.Q22",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "dP",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.1",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "P_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "P_0 = 1970647\nP_1 = 4214581\nv = 499677\n# x = lambda\ndef P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "P_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "P_1 = 4214581\nv = 499677\n# x = lambda\ndef P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "v = 499677\n# x = lambda\ndef P(x):\n    result = P_0*exp(x) + (v/x)*(exp(x)-1) - P_1\n    return result.real\ndef dP(x):\n    result = P_0*exp(x) + (v/x)*exp(x) - (v/(x**2))*exp(x) + v/(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "a = 0.1\nb = 1.66\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(P, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "b = 1.66\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(P, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(P, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.1",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "x_0 = 1.91\nvetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.1\nx_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(P, dP, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.1\nx_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "x_0 = 0.1\nx_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "x_1 = 1.63\nvetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(P, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "a = 0.1\nb = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "b = 1.99\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q27",
        "description": "Trabalho 01.Q27",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(P, a, b, n)",
        "detail": "Trabalho 01.Q27",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "dg",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.5",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "G = 9.81\nt = 8.47\nm = 66.9\nv = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "t = 8.47\nm = 66.9\nv = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "m = 66.9\nv = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "v = 22.48\n# x = lambda\ndef g(x):\n    result = G*m/x - (G*m/x)*exp(-x*t/m) - v\n    return result.real\ndef dg(x):\n    result = -G*m/(x**2) + (G*t/x)*exp(-x*t/m) + (G*m/(x**2))*exp(-x*t/m)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "a = 0.5\nb = 57.37\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "b = 57.37\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.93",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "x_0 = 0.53\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.93\nx_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.93\nx_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "x_0 = 1.93\nx_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "x_1 = 19.96\nvetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "a = 1.77\nb = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "b = 55.28\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q28",
        "description": "Trabalho 01.Q28",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q28",
        "documentation": {}
    },
    {
        "label": "sech",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))\n    return result.real",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "dg",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.34",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "G = 9.81\nt = 7.35\nL = 7.45\nv = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "t = 7.35\nL = 7.45\nv = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "L = 7.45\nv = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "v = 11.18\ndef sech(x):\n    result = 1/(cosh(x))\n    return result.real\n# x = lambda\ndef g(x):\n    result = sqrt(2*G*x) * tanh(sqrt(2*G*x)*t/(2*L)) - v\n    return result.real\ndef dg(x):\n    result = (sqrt(2*G/x)/2) * tanh(sqrt(2*G*x)*t/(2*L)) + sqrt(2*G*x)*(sech(sqrt(2*G*x)*t/(2*L))**2)*(t*sqrt(2*G)/(4*L*sqrt(x)))",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "a = 0.34\nb = 18.99\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "b = 18.99\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(g, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "x_0 = 1.48\nvetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(g, dg, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "#x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "a = 0.49\nb = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "b = 19.01\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q30",
        "description": "Trabalho 01.Q30",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(g, a, b, n)",
        "detail": "Trabalho 01.Q30",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def A(y):\n    return 4.83*y + (y**2)/2\ndef B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) \n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0.32",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "Q = 158.7\ng = 9.81\ndef A(y):\n    return 4.83*y + (y**2)/2\ndef B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "g = 9.81\ndef A(y):\n    return 4.83*y + (y**2)/2\ndef B(y):\n    return 4.83 + y\ndef f(y):\n    result = 1 - B(y)*(Q**2)/(g*(A(y)**3))\n    return result.real\ndef df(y):\n    result = -((Q**3)/g)*((-3*B(y))/(A(y)**4) + A(y)**(-3)) ",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "a = 0.32\nb = 8.93\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "b = 8.93\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "#x_0 = 1.48\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\n#print(\"\\nPelo método da secante\")\n# Pelo método da secante:\n#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "#x_0 = 1.93\n#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "#x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "#x_1 = 19.96\n#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "#vetor = [1, 2, 5]\n#for n in vetor: secante(g, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "a = 0.28\nb = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "b = 9.94\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q31",
        "description": "Trabalho 01.Q31",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q31",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def f(x):\n    result = pi*(x**2)*R - (pi/3)*(x**3) - V\n    return result.real\ndef df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "V = 286.6\nR = 5.18\n# x = lambda\ndef f(x):\n    result = pi*(x**2)*R - (pi/3)*(x**3) - V\n    return result.real\ndef df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "R = 5.18\n# x = lambda\ndef f(x):\n    result = pi*(x**2)*R - (pi/3)*(x**3) - V\n    return result.real\ndef df(x):\n    result = 2*pi*x*R - pi*(x**2)\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "a = 0\nb = 10.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "b = 10.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.87",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "x_0 = 5.46\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.87\nx_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.87\nx_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "x_0 = 0.87\nx_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "x_1 = 8.29\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "a = 0\nb = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "b = 10.36\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q32",
        "description": "Trabalho 01.Q32",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q32",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "r = 6.18\nps = 192.82\npw = 1000\n# x = lambda\ndef f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "ps",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "ps = 192.82\npw = 1000\n# x = lambda\ndef f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "pw",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "pw = 1000\n# x = lambda\ndef f(x):\n    return pw*((4/3)*(r**3) - (x**2)*r + (x**3)/3)- ps*(4*(r**3)/3)\ndef df(x):\n    result = pw*( -2*x*r + x**2)\n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "a = 0\nb = 12.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "b = 12.36\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.48",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "x_0 = 7.42\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.48\nx_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 1.48\nx_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "x_0 = 1.48\nx_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "x_1 = 10.27\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "a = 0\nb = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "b = 12.36\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q33",
        "description": "Trabalho 01.Q33",
        "peekOfCode": "vetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q33",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "r1 = 2.66\nr2 = 5.48\nH = 5.04\npt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "r2 = 5.48\nH = 5.04\npt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) ",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "H = 5.04\npt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "pt",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "pt = 262.37\npw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "pw",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "pw = 1000\nx = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "x = (H*r1)/(r2-r1)\n# x = lambda\ndef f(h):\n    return pt*H*((r1**2) + (r2**2) + (r1*r2)) - pw*(H-h)*((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x)\ndef df(h):\n    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "a = 0\nb = 5.04\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "b = 5.04\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.62",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.62\nx_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.62\nx_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "x_0 = 0.62\nx_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "x_1 = 4.95\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "a = 0\nb = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "b = 5.04\nvetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q34",
        "description": "Trabalho 01.Q34",
        "peekOfCode": "vetor = [2, 4, 7, 9]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q34",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "r = 1.82\nL = 1.73\nV = 8.0\n# x = lambda\ndef f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "L = 1.73\nV = 8.0\n# x = lambda\ndef f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "V = 8.0\n# x = lambda\ndef f(h):\n    result = L*((0.5*pi*(r**2)) - (r**2)*asin(h/r) - h*(sqrt((r**2) - (h**2)))) - V\n    return result.real\n#def df(h):\n#    result = -pw*(H-h)*(2*(r1**2)/x + 2*h*(r1**2)/(x**2) + (r1*r2)/x) + pw((r1**2) + 2*(r1**2)*h/x + (h**2)*(r1**2)/(x**2) + (r2**2) + (r1*r2) + (h*r1*r2)/x) \n#    return result\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "a = 0\nb = 1.82\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "b = 1.82\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.19",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "#x_0 = 7.42\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.19\nx_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.19\nx_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "x_0 = 0.19\nx_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "x_1 = 1.49\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "a = 0\nb = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "b = 1.82\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q35",
        "description": "Trabalho 01.Q35",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q35",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def f(m):\n    result = (g*m/c)*(1 - e**((-c/m)*t))\n    return result.real\ndef df(m):\n    result = 0\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def df(m):\n    result = 0\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = -5.65",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "g = 9.81\nc = 23.93\nv = 39.05\nt = 8.33\n# x = lambda\ndef f(m):\n    result = (g*m/c)*(1 - e**((-c/m)*t))\n    return result.real\ndef df(m):\n    result = 0",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "c = 23.93\nv = 39.05\nt = 8.33\n# x = lambda\ndef f(m):\n    result = (g*m/c)*(1 - e**((-c/m)*t))\n    return result.real\ndef df(m):\n    result = 0\n    return result.real",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "v = 39.05\nt = 8.33\n# x = lambda\ndef f(m):\n    result = (g*m/c)*(1 - e**((-c/m)*t))\n    return result.real\ndef df(m):\n    result = 0\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "t = 8.33\n# x = lambda\ndef f(m):\n    result = (g*m/c)*(1 - e**((-c/m)*t))\n    return result.real\ndef df(m):\n    result = 0\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "a = -5.65\nb = 0.13\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = -1.51\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "b = 0.13\nvetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = -1.51\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "vetor = [2, 4, 8, 12]\nfor n in vetor: bisection(f, a, b, n)\n#print(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\n#x_0 = -1.51\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = -4.73",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "#x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "#x_0 = -1.51\n#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = -4.73\nx_1 = -1.5\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "#vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "#vetor = [1, 3, 5]\n#for n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = -4.73\nx_1 = -1.5\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "x_0 = -4.73\nx_1 = -1.5\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = -5.88\nb = 0.8\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "x_1 = -1.5\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = -5.88\nb = 0.8\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = -5.88\nb = 0.8\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "a = -5.88\nb = 0.8\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "b = 0.8\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q36",
        "description": "Trabalho 01.Q36",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q36",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def f(l):\n    result = A*B - 4*l*A - 4*l*B + 12*(l**2)\n    return result.real\ndef df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "falsePositionAux",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def falsePositionAux(f, a, b):\n    fa = abs(f(a))\n    fb = abs(f(b))\n    return (a*fb + b*fa)/(fa + fb)\ndef falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): ",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "falsePosition",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def falsePosition(f, a, b, n):\n    if(f(a)*f(b) > 0): \n        return\n    for i in range(n):\n        x = falsePositionAux(f, a, b)\n        if(f(a)*f(x) < 0): \n            b = x\n        else: \n            a = x\n    print(\"%.17f\" %(x))",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def newton(f, df, m, n):\n    for i in range(n):\n        if(df(m) == 0): return\n        m = m - (f(m)/df(m))\n    print(m)\ndef bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def bisection(f, a, b, n):\n    if(f(a)*f(b) > 0):\n        return\n    for i in range(n):\n        m = (a+b)/2\n        if(f(a)*f(m) < 0):\n            b = m\n        else: \n            a = m\n    print(\"%.17f\"%(m))",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "aproximateDerivative",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def aproximateDerivative(f, x1, x0):\n    return (f(x1)-f(x0))/(x1-x0)\ndef secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "def secante(f, x1, x0, n):\n    for i in range(n):\n        x2 = x0 - f(x0)/aproximateDerivative(f, x1, x0)\n        #x2 = (x0*f(x1) - x1*f(x0))/(f(x1)-f(x0))\n        x0 = x1\n        x1 = x2\n    print(x2)\nprint(\"\\nPelo método da bisseção\")\n# Pelo método da bisseção:\na = 0",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "A = 8.93\nB = 17.22\n# x = lambda\ndef f(l):\n    result = A*B - 4*l*A - 4*l*B + 12*(l**2)\n    return result.real\ndef df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "B = 17.22\n# x = lambda\ndef f(l):\n    result = A*B - 4*l*A - 4*l*B + 12*(l**2)\n    return result.real\ndef df(l):\n    result = -4*A -4*B + 24*l\n    return result.real\ndef falsePositionAux(f, a, b):\n    fa = abs(f(a))",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "a = 0\nb = 4.46\nvetor = [2, 4, 8, 12, 1000]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "b = 4.46\nvetor = [2, 4, 8, 12, 1000]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "vetor = [2, 4, 8, 12, 1000]\nfor n in vetor: bisection(f, a, b, n)\nprint(\"\\nPelo método de Newton\")\n# Pelo método de Newton:\nx_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.72",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "x_0 = 2.08\nvetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.72\nx_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "vetor = [1, 3, 5]\nfor n in vetor: newton(f, df, x_0, n)\nprint(\"\\nPelo método da secante\")\n# Pelo método da secante:\nx_0 = 0.72\nx_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "x_0",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "x_0 = 0.72\nx_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "x_1 = 3.55\nvetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "vetor = [1, 2, 5]\nfor n in vetor: secante(f, x_1, x_0, n)\nprint(\"\\nPelo método da posição falsa\")\n# Pelo método da posição falsa:\na = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "a = 0\nb = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "b = 4.46\nvetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q37",
        "description": "Trabalho 01.Q37",
        "peekOfCode": "vetor = [2, 4, 7, 11]\nfor n in vetor: falsePosition(f, a, b, n)",
        "detail": "Trabalho 01.Q37",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Trabalho 01.Q5",
        "description": "Trabalho 01.Q5",
        "peekOfCode": "def f(x):\n    return x*(x-1)*(x-2) + 0.42\ndef df(x):\n    return 3*(x**2) - 6*x + 2\ndef newton(f, df, c, iterations):\n    x = c\n    for i in range(iterations):\n        x = x - f(x)/df(x)\n    # Naprint(\"x = \", x,\" para \", iterations,\" iterações\")\n    print(\"%.10f,\"%x)",
        "detail": "Trabalho 01.Q5",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Trabalho 01.Q5",
        "description": "Trabalho 01.Q5",
        "peekOfCode": "def df(x):\n    return 3*(x**2) - 6*x + 2\ndef newton(f, df, c, iterations):\n    x = c\n    for i in range(iterations):\n        x = x - f(x)/df(x)\n    # Naprint(\"x = \", x,\" para \", iterations,\" iterações\")\n    print(\"%.10f,\"%x)\n        # Equação da reta tangente à P(c, f(c)) é dada por: y = f(c) + df(c)(x-c)\n        # Na interceção da reta com o eixo x temos:",
        "detail": "Trabalho 01.Q5",
        "documentation": {}
    },
    {
        "label": "newton",
        "kind": 2,
        "importPath": "Trabalho 01.Q5",
        "description": "Trabalho 01.Q5",
        "peekOfCode": "def newton(f, df, c, iterations):\n    x = c\n    for i in range(iterations):\n        x = x - f(x)/df(x)\n    # Naprint(\"x = \", x,\" para \", iterations,\" iterações\")\n    print(\"%.10f,\"%x)\n        # Equação da reta tangente à P(c, f(c)) é dada por: y = f(c) + df(c)(x-c)\n        # Na interceção da reta com o eixo x temos:\n        # 0 = f(c) + df(c)(x-c) \n        # -> x-c = - f(c)/df(c) ",
        "detail": "Trabalho 01.Q5",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Trabalho 01.Q5",
        "description": "Trabalho 01.Q5",
        "peekOfCode": "c = 2.65161653\nvetor = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]\nfor iterations in vetor:\n    newton(f, df, c, iterations)",
        "detail": "Trabalho 01.Q5",
        "documentation": {}
    },
    {
        "label": "vetor",
        "kind": 5,
        "importPath": "Trabalho 01.Q5",
        "description": "Trabalho 01.Q5",
        "peekOfCode": "vetor = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]\nfor iterations in vetor:\n    newton(f, df, c, iterations)",
        "detail": "Trabalho 01.Q5",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Trabalho 02.CurveFitMethods01",
        "description": "Trabalho 02.CurveFitMethods01",
        "peekOfCode": "def calc_coeffs(X, Y, degree = 1):\n    degree += 1\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(degree):\n        row = []\n        for j in range(degree):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)",
        "detail": "Trabalho 02.CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Trabalho 02.CurveFitMethods01",
        "description": "Trabalho 02.CurveFitMethods01",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\ndef calc_non_linear_coeffs(X, Y):\n    # Traslação do gráfico sobre o eixo Y:\n    const_Y = min(Y)",
        "detail": "Trabalho 02.CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "calc_non_linear_coeffs",
        "kind": 2,
        "importPath": "Trabalho 02.CurveFitMethods01",
        "description": "Trabalho 02.CurveFitMethods01",
        "peekOfCode": "def calc_non_linear_coeffs(X, Y):\n    # Traslação do gráfico sobre o eixo Y:\n    const_Y = min(Y)\n    if(const_Y < 0):\n        const_Y = abs(const_Y) + 1\n    else:\n        const_Y = 0\n    # Traslação do gráfico sobre o eixo X:\n    const_X = min(X)\n    if(const_X < 0):",
        "detail": "Trabalho 02.CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "build_non_linear",
        "kind": 2,
        "importPath": "Trabalho 02.CurveFitMethods01",
        "description": "Trabalho 02.CurveFitMethods01",
        "peekOfCode": "def build_non_linear(coeffs):\n    def func(x):\n        return ((coeffs['a']/coeffs['b'])*(1/sqrt(x + coeffs['k'])) +  1/coeffs['b'])**2 - coeffs['c']\n    return func\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.7708, 1.6674, 2.3526, 2.9878, 4.1301, 4.6131, 5.6179, 6.3146, 7.0627, 8.0253, 8.8753, 9.421]\n    Y = [6.6604, 3.6621, 2.7577, 2.3334, 1.8311, 1.6729, 1.4886, 1.3931, 1.2011, 1.2012, 1.206, 1.0941]\n    values = [1.1859, 4.6267, 5.8824]\n    coeffs = calc_non_linear_coeffs(X, Y)",
        "detail": "Trabalho 02.CurveFitMethods01",
        "documentation": {}
    },
    {
        "label": "diff_fin",
        "kind": 2,
        "importPath": "Trabalho 02.DeritvativesMethods01",
        "description": "Trabalho 02.DeritvativesMethods01",
        "peekOfCode": "def diff_fin(X, x0, k):\n    n = len(X)\n    A = []\n    B = []\n    for i in range(n):\n        row = []\n        for xi in X:\n            row.append(xi**i)\n        A.append(row)\n        if i < k:",
        "detail": "Trabalho 02.DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "get_aprox",
        "kind": 2,
        "importPath": "Trabalho 02.DeritvativesMethods01",
        "description": "Trabalho 02.DeritvativesMethods01",
        "peekOfCode": "def get_aprox(X, coeffs, f):\n    sum = 0\n    for xi, ci in zip(X, coeffs):\n        sum += ci*f(xi)\n    return sum\n# Contrução da fórmula de Taylor para n:\ndef build_taylor(X, x0, f, n):\n    def p(x):\n        poly = f(x0)\n        for i in range(n):",
        "detail": "Trabalho 02.DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "build_taylor",
        "kind": 2,
        "importPath": "Trabalho 02.DeritvativesMethods01",
        "description": "Trabalho 02.DeritvativesMethods01",
        "peekOfCode": "def build_taylor(X, x0, f, n):\n    def p(x):\n        poly = f(x0)\n        for i in range(n):\n            coeffs = diff_fin(X, x0, i+1)\n            poly += get_aprox(X, coeffs, f) * (x - x0)**(i+1) / factorial(i+1)\n        return poly\n    return p\n# Método de extrapolação de Richardson:\ndef richardson(f, x0, h, k):",
        "detail": "Trabalho 02.DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 02.DeritvativesMethods01",
        "description": "Trabalho 02.DeritvativesMethods01",
        "peekOfCode": "def richardson(f, x0, h, k):\n    table = []\n    for i in range(k):\n        item = F1(f, x0, h/(2**i))\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)\n            table[j] = new_item\n    return table[0]",
        "detail": "Trabalho 02.DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "F1",
        "kind": 2,
        "importPath": "Trabalho 02.DeritvativesMethods01",
        "description": "Trabalho 02.DeritvativesMethods01",
        "peekOfCode": "def F1(f, x0, h):\n    return (f(x0+h) - f(x0))/h\n# Método de extrapolação de Richardson usando:\ndef richardson_alternative(approximations, k):\n    # Note que aproximantion[i] é a função F1 calculada na linha i do método, ou seja, com F1(h/2**i):\n    table = []\n    for i in range(k):\n        item = approximations[i]\n        table.append(item)\n    for i in range(k):",
        "detail": "Trabalho 02.DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "richardson_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.DeritvativesMethods01",
        "description": "Trabalho 02.DeritvativesMethods01",
        "peekOfCode": "def richardson_alternative(approximations, k):\n    # Note que aproximantion[i] é a função F1 calculada na linha i do método, ou seja, com F1(h/2**i):\n    table = []\n    for i in range(k):\n        item = approximations[i]\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((2**(i+1))*table[j+1] - table[j])/(2**(i+1) - 1)\n            table[j] = new_item",
        "detail": "Trabalho 02.DeritvativesMethods01",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "def v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "cd",
        "kind": 5,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "cd = 0.43\ng = 9.81\nm = 74.08\n# Fórmula:\ndef v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "g = 9.81\nm = 74.08\n# Fórmula:\ndef v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Trabalho 02.IntegrationMethods01",
        "description": "Trabalho 02.IntegrationMethods01",
        "peekOfCode": "m = 74.08\n# Fórmula:\ndef v(t):\n    return sqrt(g*m/cd) * tanh(sqrt(g*cd/m)*t)\ndef trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)",
        "detail": "Trabalho 02.IntegrationMethods01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods02",
        "description": "Trabalho 02.IntegrationMethods02",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "Trabalho 02.IntegrationMethods02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods03",
        "description": "Trabalho 02.IntegrationMethods03",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "Trabalho 02.IntegrationMethods03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods04",
        "description": "Trabalho 02.IntegrationMethods04",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "Trabalho 02.IntegrationMethods04",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def quadrature(f, cord, coeffs):\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*f(xi)\n    return sum\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "trapeze_sum_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def trapeze_sum_alternative(X, Y):\n    n = len(X)-1\n    sum = Y[0]/2 + Y[-1]/2\n    base = (X[-1]-X[0])/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += Y[k]\n    area = base*sum\n    return area\ndef simpson_alternative(X, Y):",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "simpson_alternative",
        "kind": 2,
        "importPath": "Trabalho 02.IntegrationMethods05",
        "description": "Trabalho 02.IntegrationMethods05",
        "peekOfCode": "def simpson_alternative(X, Y):\n    num_subintervals = len(X)-1\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (X[-1]-X[0])/num_subintervals\n    sum = Y[0] + Y[-1]\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*Y[k]\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):",
        "detail": "Trabalho 02.IntegrationMethods05",
        "documentation": {}
    },
    {
        "label": "raiz2",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz2 = [-0.5773502691896257, 0.5773502691896257]\npeso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso2",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz3",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso3",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz4",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso4",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz5",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso5",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz6",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso6",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz7",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso7",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz8",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso8",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz9",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso9",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz10",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso10",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz11",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso11",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz12",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso12",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz13",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso13",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz14",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso14",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz15",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso15",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz16",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso16",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz17",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]\npeso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso17",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz18",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso18",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz19",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso19",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz20",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "raiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso20",
        "kind": 5,
        "importPath": "Trabalho 02.NodesAndWeights",
        "description": "Trabalho 02.NodesAndWeights",
        "peekOfCode": "peso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "Trabalho 02.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "diff_div",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def diff_div(X, Y):\n    # Esta cópia de Y irá mudar a cada iteração:\n    Y_table = [yi for yi in Y]  \n    # Sabemos que o primeiro coeficiente, a0, é sempre igual a y0, assim temos:\n    coeffs = [Y[0]] + [0 for yi in Y[1:]]   \n    n = len(coeffs)\n    # Para cada coluna (lembrando que a 1º coluna já é dada):\n    for i in range(n-1):\n        # Para cada elemento da coluna (lembrando que a0 já foi calculcado):\n        for j in range(n - i - 1):",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def build_poly(X, coeffs):\n    def func(x):\n        sum = 0\n        for i, ci in enumerate(coeffs):\n            prod = ci\n            # Se i = 0 o loop não itera:\n            for j in range(i):\n                prod *= (x - X[j])\n            sum += prod\n        return sum",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef aprox_coeffs(func_list, f, a, b, n):\n    A = []",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n\"\"\"\nDentre todos os polinômios de grau n que interpolam y = f(x) numa lista de n+1 pontos no intervalo [-1, 1],\naquele que interpola nas raízes do polinômio T_n+1(x) é o polinômio que melhor se aproxima da função y = f(x),\nou seja, esse polinômio minimiza a seguinte função erro:\n    erro(P) = max|f(x)-P(x)| para -1 <= x <= 1, sendo P um polinômio\n\"\"\"",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "changeToChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def changeToChebyInterval(f, a, b):\n    def F(u):\n        return f(((b-a)/2) * u + (a+b)/2)\n    return F\ndef changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "changeFromChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "getChebyPoly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    for _ in range(1, n):",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "getChebyPolyList",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def getChebyPolyList(n):\n    \"\"\"\n    Retorna a lista do n (note que começa do 0-ésimo e vai até o (n-1)-ésimo) primeiros polinômios de chebyshev como objetos de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    T_func_list = [lambda x: 1, lambda x: x] \n    for i in range(2, n):",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "chebyRoots",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def chebyRoots(n):\n    \"\"\"\n    Retorna as n raízes do e-nésimo polinômio de chebyshev.\n    \"\"\"\n    roots = []\n    for k in range(1, n+1):\n        x_k = cos((2*k-1)*pi/(2*n))\n        roots.append(x_k)\n    return roots\ndef stringToFunc(string):",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return x * sin(-6 * x**2)",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby01",
        "description": "Trabalho 03.cheby01",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return x * sin(-6 * x**2)\n    a = -1\n    b = 1\n    n = 8192\n    num_of_polys = 21",
        "detail": "Trabalho 03.cheby01",
        "documentation": {}
    },
    {
        "label": "diff_div",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def diff_div(X, Y):\n    # Esta cópia de Y irá mudar a cada iteração:\n    Y_table = [yi for yi in Y]  \n    # Sabemos que o primeiro coeficiente, a0, é sempre igual a y0, assim temos:\n    coeffs = [Y[0]] + [0 for yi in Y[1:]]   \n    n = len(coeffs)\n    # Para cada coluna (lembrando que a 1º coluna já é dada):\n    for i in range(n-1):\n        # Para cada elemento da coluna (lembrando que a0 já foi calculcado):\n        for j in range(n - i - 1):",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def build_poly(X, coeffs):\n    def func(x):\n        sum = 0\n        for i, ci in enumerate(coeffs):\n            prod = ci\n            # Se i = 0 o loop não itera:\n            for j in range(i):\n                prod *= (x - X[j])\n            sum += prod\n        return sum",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = simpson(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n\"\"\"\nDentre todos os polinômios de grau n que interpolam y = f(x) numa lista de n+1 pontos no intervalo [-1, 1],\naquele que interpola nas raízes do polinômio T_n+1(x) é o polinômio que melhor se aproxima da função y = f(x),\nou seja, esse polinômio minimiza a seguinte função erro:\n    erro(P) = max|f(x)-P(x)| para -1 <= x <= 1, sendo P um polinômio\n\"\"\"",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "changeToChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def changeToChebyInterval(f, a, b):\n    def F(u):\n        return f(((b-a)/2) * u + (a+b)/2)\n    return F\ndef changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "changeFromChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "getChebyPoly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    for _ in range(1, n):",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "getChebyPolyList",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def getChebyPolyList(n):\n    \"\"\"\n    Retorna a lista do n (note que começa do 0-ésimo e vai até o (n-1)-ésimo) primeiros polinômios de chebyshev como objetos de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    T_func_list = [lambda x: 1, lambda x: x] \n    for i in range(2, n):",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "chebyRoots",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def chebyRoots(n):\n    \"\"\"\n    Retorna as n raízes do e-nésimo polinômio de chebyshev.\n    \"\"\"\n    roots = []\n    for k in range(1, n+1):\n        x_k = cos((2*k-1)*pi/(2*n))\n        roots.append(x_k)\n    return roots\ndef stringToFunc(string):",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return x * cos(10*(x**2)*(e**(-x**2)))",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby02",
        "description": "Trabalho 03.cheby02",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return x * cos(10*(x**2)*(e**(-x**2)))\n    a = -1\n    b = 1\n    n = 4096\n    num_of_polys = 9",
        "detail": "Trabalho 03.cheby02",
        "documentation": {}
    },
    {
        "label": "diff_div",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def diff_div(X, Y):\n    # Esta cópia de Y irá mudar a cada iteração:\n    Y_table = [yi for yi in Y]  \n    # Sabemos que o primeiro coeficiente, a0, é sempre igual a y0, assim temos:\n    coeffs = [Y[0]] + [0 for yi in Y[1:]]   \n    n = len(coeffs)\n    # Para cada coluna (lembrando que a 1º coluna já é dada):\n    for i in range(n-1):\n        # Para cada elemento da coluna (lembrando que a0 já foi calculcado):\n        for j in range(n - i - 1):",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def build_poly(X, coeffs):\n    def func(x):\n        sum = 0\n        for i, ci in enumerate(coeffs):\n            prod = ci\n            # Se i = 0 o loop não itera:\n            for j in range(i):\n                prod *= (x - X[j])\n            sum += prod\n        return sum",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n, k):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = richardson(lambda x: f(x)*fi(x), a, b, n, k)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n\"\"\"\nDentre todos os polinômios de grau n que interpolam y = f(x) numa lista de n+1 pontos no intervalo [-1, 1],\naquele que interpola nas raízes do polinômio T_n+1(x) é o polinômio que melhor se aproxima da função y = f(x),\nou seja, esse polinômio minimiza a seguinte função erro:\n    erro(P) = max|f(x)-P(x)| para -1 <= x <= 1, sendo P um polinômio\n\"\"\"",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "changeToChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def changeToChebyInterval(f, a, b):\n    def F(u):\n        return f(((b-a)/2) * u + (a+b)/2)\n    return F\ndef changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "changeFromChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "getChebyPoly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    for _ in range(1, n):",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "getChebyPolyList",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def getChebyPolyList(n):\n    \"\"\"\n    Retorna a lista do n (note que começa do 0-ésimo e vai até o (n-1)-ésimo) primeiros polinômios de chebyshev como objetos de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    T_func_list = [lambda x: 1, lambda x: x] \n    for i in range(2, n):",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "chebyRoots",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def chebyRoots(n):\n    \"\"\"\n    Retorna as n raízes do e-nésimo polinômio de chebyshev.\n    \"\"\"\n    roots = []\n    for k in range(1, n+1):\n        x_k = cos((2*k-1)*pi/(2*n))\n        roots.append(x_k)\n    return roots\ndef stringToFunc(string):",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return tanh(3*x)*cos(3*x)",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby03",
        "description": "Trabalho 03.cheby03",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return tanh(3*x)*cos(3*x)\n    a = -1\n    b = 1\n    n = 10\n    k = 8",
        "detail": "Trabalho 03.cheby03",
        "documentation": {}
    },
    {
        "label": "trapz",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def trapz(f, a, b, n):\n    h = abs(b - a) / n\n    sum_fx = 0\n    for i in range(1, n):\n        sum_fx += f(a + i * h)\n    return (f(a) + 2 * sum_fx + f(b)) * (h / 2)\ndef simps(f, a, b, n):\n    if n % 2 != 0:\n        print('O valor n deve ser par')\n        return None",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "simps",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def simps(f, a, b, n):\n    if n % 2 != 0:\n        print('O valor n deve ser par')\n        return None\n    num_parabolas = n / 2\n    soma = 0\n    h = (b - a) / n\n    for i in range(int(num_parabolas)):\n        x0 = a + (2 * i) * h\n        x1 = a + (2 * i + 1) * h",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "trapz_romberg",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def trapz_romberg(f, a, b, h):\n    n = int((b - a) / h)\n    soma = 0\n    for k in range(1, n):\n        soma += f(a + k * h)\n    return (h / 2) * (f(a) + 2 * soma + f(b))\ndef romberg(coluna_f1):\n    coluna_f1 = [i for i in coluna_f1]\n    n = len(coluna_f1)\n    for j in range(n - 1):",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "romberg",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def romberg(coluna_f1):\n    coluna_f1 = [i for i in coluna_f1]\n    n = len(coluna_f1)\n    for j in range(n - 1):\n        temp_col = [0] * (n - 1 - j)\n        for i in range(n - 1 - j):\n            power = j + 1\n            temp_col[i] = (4 ** power * coluna_f1[i + 1] - coluna_f1[i]) / (4 ** power - 1)\n        coluna_f1[:n - 1 - j] = temp_col\n        # print(f'F_{j+2} = {temp_col}')",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "best_func",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def best_func(f, funcs, a, b, method: ['trapz', 256]):\n    k = len(funcs)\n    A = [[0 for _ in range(k)] for _ in range(k)]\n    B = []\n    for i in range(k):\n        for j in range(k):\n            if j >= i:\n                def f_ij(x):\n                    return  funcs[j](x) * funcs[i](x)\n                if method[0] == 'trapz':",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "quadratura",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def quadratura(funcao, pontos, pesos):\n    soma = 0\n    for xk, ck in zip(pontos, pesos):\n        soma += ck * funcao(xk)\n    return soma\ndef change(f, a, b):\n    def g(u):\n        return f((b + a) / 2 + (b - a) * u / 2) * (b - a) / 2\n    return g\ndef chebyshev(x, n):",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b + a) / 2 + (b - a) * u / 2) * (b - a) / 2\n    return g\ndef chebyshev(x, n):\n    f0 = 1.0\n    f1 = x\n    fn = 0\n    ni = 2\n    if n == 0:",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "chebyshev",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def chebyshev(x, n):\n    f0 = 1.0\n    f1 = x\n    fn = 0\n    ni = 2\n    if n == 0:\n      return 1.0\n    elif n == 1:\n      return x\n    else:",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "build_chebyshev_polynomial",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04 (bidin version)",
        "description": "Trabalho 03.cheby04 (bidin version)",
        "peekOfCode": "def build_chebyshev_polynomial(n):\n    def temp(t):\n        return chebyshev(t, n)\n    return temp\nif __name__ == '__main__':\n    raiz2 = [-0.5773502691896257, 0.5773502691896257]\n    peso2 = [1.0, 1.0]\n    raiz3 = [0, -0.7745966692414834, 0.7745966692414834]\n    peso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\n    raiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]",
        "detail": "Trabalho 03.cheby04 (bidin version)",
        "documentation": {}
    },
    {
        "label": "diff_div",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def diff_div(X, Y):\n    # Esta cópia de Y irá mudar a cada iteração:\n    Y_table = [yi for yi in Y]  \n    # Sabemos que o primeiro coeficiente, a0, é sempre igual a y0, assim temos:\n    coeffs = [Y[0]] + [0 for yi in Y[1:]]   \n    n = len(coeffs)\n    # Para cada coluna (lembrando que a 1º coluna já é dada):\n    for i in range(n-1):\n        # Para cada elemento da coluna (lembrando que a0 já foi calculcado):\n        for j in range(n - i - 1):",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def build_poly(X, coeffs):\n    def func(x):\n        sum = 0\n        for i, ci in enumerate(coeffs):\n            prod = ci\n            # Se i = 0 o loop não itera:\n            for j in range(i):\n                prod *= (x - X[j])\n            sum += prod\n        return sum",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def quadrature(f, a, b, cord_quadrature, coeffs_quadrature):\n    g = changeToQuadratureInterval(f, a, b)\n    sum = 0\n    for xi, ci in zip(cord_quadrature, coeffs_quadrature):\n        sum += ci*g(xi)\n    return sum\ndef changeToQuadratureInterval(f, a, b):\n    \"\"\"\n    Muda uma função do intervalo [a, b] para o intervalo [-1, 1].\n    Obs.: Note que nesta transformação a função também é multiplicada, isto pois ao se realizar a substituição de x pela nova variável t no",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "changeToQuadratureInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def changeToQuadratureInterval(f, a, b):\n    \"\"\"\n    Muda uma função do intervalo [a, b] para o intervalo [-1, 1].\n    Obs.: Note que nesta transformação a função também é multiplicada, isto pois ao se realizar a substituição de x pela nova variável t no\n    intervalo [a, b] deve-se fazer a substituição dx = (dt/dx)dt.\n    \"\"\"\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef aprox_coeffs(func_list, f, a, b, cord_quadrature, coeffs_quadrature):",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, cord_quadrature, coeffs_quadrature):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = quadrature(lambda x: f(x)*fi(x), a, b, cord_quadrature, coeffs_quadrature)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n\"\"\"\nDentre todos os polinômios de grau n que interpolam y = f(x) numa lista de n+1 pontos no intervalo [-1, 1],\naquele que interpola nas raízes do polinômio T_n+1(x) é o polinômio que melhor se aproxima da função y = f(x),\nou seja, esse polinômio minimiza a seguinte função erro:\n    erro(P) = max|f(x)-P(x)| para -1 <= x <= 1, sendo P um polinômio\n\"\"\"",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "changeToChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def changeToChebyInterval(f, a, b):\n    def F(u):\n        return f(((b-a)/2) * u + (a+b)/2)\n    return F\ndef changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "changeFromChebyInterval",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def changeFromChebyInterval(g, a, b):\n    def G(u):\n        return g((2/(b-a)) * u - (a+b)/(a-b))\n    return G\ndef getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "getChebyPoly",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def getChebyPoly(n):\n    \"\"\"\n    Retorna o e-nésimo polinômio de chebyshev como um objeto de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva\n    com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    for _ in range(1, n):",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "getChebyPolyList",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def getChebyPolyList(n):\n    \"\"\"\n    Retorna a lista do n (note que começa do 0-ésimo e vai até o (n-1)-ésimo) primeiros polinômios de chebyshev como objetos de expressão\n    da biblioteca sympy (o que é diferente e melhor que um função recursiva com complexidade O(2^n)).\n    \"\"\"\n    x = symbols('x')\n    t_n = 1\n    T = [1, x]\n    T_func_list = [lambda x: 1, lambda x: x] \n    for i in range(2, n):",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "chebyRoots",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def chebyRoots(n):\n    \"\"\"\n    Retorna as n raízes do e-nésimo polinômio de chebyshev.\n    \"\"\"\n    roots = []\n    for k in range(1, n+1):\n        x_k = cos((2*k-1)*pi/(2*n))\n        roots.append(x_k)\n    return roots\ndef stringToFunc(string):",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return log(1 + x**2, e)*sin(10*x)",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.cheby04",
        "description": "Trabalho 03.cheby04",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\nif __name__ == '__main__':\n    # Exemplo 01:\n    def f(x):\n        return log(1 + x**2, e)*sin(10*x)\n    a = -1\n    b = 1\n    exact_for_degree_less_than = 26\n    last_poly_num = 21",
        "detail": "Trabalho 03.cheby04",
        "documentation": {}
    },
    {
        "label": "euler",
        "kind": 2,
        "importPath": "Trabalho 03.edo01",
        "description": "Trabalho 03.edo01",
        "peekOfCode": "def euler(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        # Calculando x_k:\n        x = x0 + k*h\n        # Calculando y_k:\n        y_k = Y[k-1] + df(X[k-1], Y[k-1])*h\n        X.append(x)",
        "detail": "Trabalho 03.edo01",
        "documentation": {}
    },
    {
        "label": "euler",
        "kind": 2,
        "importPath": "Trabalho 03.edo02",
        "description": "Trabalho 03.edo02",
        "peekOfCode": "def euler(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        # Calculando y_k:\n        y_k = Y[k-1] + df(X[k-1], Y[k-1])*h\n        Y.append(y_k)",
        "detail": "Trabalho 03.edo02",
        "documentation": {}
    },
    {
        "label": "heun",
        "kind": 2,
        "importPath": "Trabalho 03.edoHeun",
        "description": "Trabalho 03.edoHeun",
        "peekOfCode": "def heun(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h, Y[k-1] + m1*h)\n        yk = Y[k-1] + (h/2)*(m1 + m2)",
        "detail": "Trabalho 03.edoHeun",
        "documentation": {}
    },
    {
        "label": "heun",
        "kind": 2,
        "importPath": "Trabalho 03.edoHeun01",
        "description": "Trabalho 03.edoHeun01",
        "peekOfCode": "def heun(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h, Y[k-1] + m1*h)\n        xk = x0 + k*h\n        yk = Y[k-1] + (h/2)*(m1 + m2)\n        X.append(xk)",
        "detail": "Trabalho 03.edoHeun01",
        "documentation": {}
    },
    {
        "label": "heun",
        "kind": 2,
        "importPath": "Trabalho 03.edoHeun02",
        "description": "Trabalho 03.edoHeun02",
        "peekOfCode": "def heun(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h, Y[k-1] + m1*h)\n        yk = Y[k-1] + (h/2)*(m1 + m2)",
        "detail": "Trabalho 03.edoHeun02",
        "documentation": {}
    },
    {
        "label": "eulerPontoMedio",
        "kind": 2,
        "importPath": "Trabalho 03.edoPontoMédio",
        "description": "Trabalho 03.edoPontoMédio",
        "peekOfCode": "def eulerPontoMedio(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + (h/2), Y[k-1] + (h/2)*m1)\n        yk = Y[k-1] + h*m2",
        "detail": "Trabalho 03.edoPontoMédio",
        "documentation": {}
    },
    {
        "label": "ralston",
        "kind": 2,
        "importPath": "Trabalho 03.edoRalston",
        "description": "Trabalho 03.edoRalston",
        "peekOfCode": "def ralston(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + (3/4)*h, Y[k-1] + (3/4)*h*m1)\n        yk = Y[k-1] + (h/3)*(m1 + 2*m2)",
        "detail": "Trabalho 03.edoRalston",
        "documentation": {}
    },
    {
        "label": "rungeKutta",
        "kind": 2,
        "importPath": "Trabalho 03.edoRungeKutta (ordem 2) - 01",
        "description": "Trabalho 03.edoRungeKutta (ordem 2) - 01",
        "peekOfCode": "def rungeKutta(df, x0, y0, X, b = 1):\n    \"\"\"\"\"\n    Método de Runge-Kutta geral de ordem 2\n    Por padrão usa o método do ponto médio de Euler que corresponde a b = 1\n    b = 1/2 corresponde ao método de Heun\n    b = 2/3 corresponde ao método de Ralston\n    \"\"\"\"\"\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]",
        "detail": "Trabalho 03.edoRungeKutta (ordem 2) - 01",
        "documentation": {}
    },
    {
        "label": "rungeKutta",
        "kind": 2,
        "importPath": "Trabalho 03.edoRungeKutta (ordem 4) - 01",
        "description": "Trabalho 03.edoRungeKutta (ordem 4) - 01",
        "peekOfCode": "def rungeKutta(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h/2, Y[k-1] + m1*h/2)\n        m3 = df(X[k-1] + h/2, Y[k-1] + m2*h/2)",
        "detail": "Trabalho 03.edoRungeKutta (ordem 4) - 01",
        "documentation": {}
    },
    {
        "label": "rungeKutta",
        "kind": 2,
        "importPath": "Trabalho 03.edoRungeKutta (ordem 4) - 02",
        "description": "Trabalho 03.edoRungeKutta (ordem 4) - 02",
        "peekOfCode": "def rungeKutta(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h/2, Y[k-1] + m1*h/2)\n        m3 = df(X[k-1] + h/2, Y[k-1] + m2*h/2)",
        "detail": "Trabalho 03.edoRungeKutta (ordem 4) - 02",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.fourier01",
        "description": "Trabalho 03.fourier01",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.fourier01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.fourier01",
        "description": "Trabalho 03.fourier01",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef fourier_coeffs(f, a, b, num_coeffs, num_intervals):\n    \"\"\"",
        "detail": "Trabalho 03.fourier01",
        "documentation": {}
    },
    {
        "label": "fourier_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.fourier01",
        "description": "Trabalho 03.fourier01",
        "peekOfCode": "def fourier_coeffs(f, a, b, num_coeffs, num_intervals):\n    \"\"\"\n    Retorna os coeficientes a_n's, b_n's e c da série de fourier \n    para uma determinada função f(x)\n    \"\"\"   \n    A = []\n    B = []\n    c = (1/(2*pi))*trapeze_sum(f, a, b, num_intervals)\n    for m in range(1, num_coeffs+1):\n        a_m = (1/pi)*trapeze_sum(lambda x: f(x)*cos(m*x), a, b, num_intervals)",
        "detail": "Trabalho 03.fourier01",
        "documentation": {}
    },
    {
        "label": "build_fourier",
        "kind": 2,
        "importPath": "Trabalho 03.fourier01",
        "description": "Trabalho 03.fourier01",
        "peekOfCode": "def build_fourier(A, B, c):\n    \"\"\"\n    Monta a série de fourier a partir dos coeficientes a_n's, b_n's e c\n    calculados para um determinada função f(x)\n    \"\"\"\n    def f(x):\n        return c + sum(a_n*cos(n*x) + b_n*sin(n*x) for n, (a_n, b_n) in enumerate(zip(A, B), 1))\n    return f\nif __name__ == \"__main__\":\n    def f(x):",
        "detail": "Trabalho 03.fourier01",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef fourier_coeffs(f, a, b, num_coeffs, num_intervals):\n    \"\"\"",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "fourier_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def fourier_coeffs(f, a, b, num_coeffs, num_intervals):\n    \"\"\"\n    Retorna os coeficientes a_n's, b_n's e c da série de fourier \n    para uma determinada função f(x)\n    \"\"\"   \n    A = []\n    B = []\n    c = (1/(2*pi))*simpson(f, a, b, num_intervals)\n    for m in range(1, num_coeffs+1):\n        a_m = (1/pi)*simpson(lambda x: f(x)*cos(m*x), a, b, num_intervals)",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def quadrature(f, a, b, cord, coeffs):\n    g = change(f, a, b)\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*g(xi)\n    return sum\n# Transforma string em função:\ndef stringToFunc(string):\n    def f(x):\n        return eval(string)",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n# Mudança de variável na função f para se encaixar nos limites de integração [-1, 1]:\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef build_fourier(A, B, c):",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef build_fourier(A, B, c):\n    \"\"\"\n    Monta a série de fourier a partir dos coeficientes a_n's, b_n's e c\n    calculados para um determinada função f(x)\n    \"\"\"\n    def f(x):",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "build_fourier",
        "kind": 2,
        "importPath": "Trabalho 03.fourier02",
        "description": "Trabalho 03.fourier02",
        "peekOfCode": "def build_fourier(A, B, c):\n    \"\"\"\n    Monta a série de fourier a partir dos coeficientes a_n's, b_n's e c\n    calculados para um determinada função f(x)\n    \"\"\"\n    def f(x):\n        return c + sum(a_n*cos(n*x) + b_n*sin(n*x) for n, (a_n, b_n) in enumerate(zip(A, B), 1))\n    return f\nif __name__ == \"__main__\":\n    def f(x):",
        "detail": "Trabalho 03.fourier02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs_ort",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def aprox_coeffs_ort(func_list, f, a, b, n):\n    coeffs = []\n    for fi in func_list:\n        ck = simpson(lambda x: f(x)*fi(x), a, b, n)/simpson(lambda x: fi(x)*fi(x), a, b, n)\n        coeffs.append(ck)\n    return coeffs\ndef build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n# Transforma string em função:\ndef stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n\"\"\"",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):\n(Anotação: fazer as funções de maneira não recursiva usando a biblioteca sympy)\n\"\"\"\ndef legendre(x, n):",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "legendre",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def legendre(x, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    else:\n        return ((2 * n - 1) * x * legendre(x, n - 1) - (n - 1) * legendre(x, n - 2)) / n\ndef build_legendre_polynomial(n):\n    def p(x):\n        return legendre(x, n)",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "build_legendre_polynomial",
        "kind": 2,
        "importPath": "Trabalho 03.legendre02",
        "description": "Trabalho 03.legendre02",
        "peekOfCode": "def build_legendre_polynomial(n):\n    def p(x):\n        return legendre(x, n)\n    return p\nif __name__ == '__main__':\n    # Exemplo 02:\n    def f(x):\n        return  x * cos(10 * x**2 * exp(-x**2))\n    a = -1\n    b = 1",
        "detail": "Trabalho 03.legendre02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs_ort",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def aprox_coeffs_ort(func_list, f, a, b, n):\n    coeffs = []\n    for fi in func_list:\n        k = 8\n        ci = richardson(lambda x: f(x)*fi(x), a, b, n, k)/richardson(lambda x: fi(x)*fi(x), a, b, n, k)\n        coeffs.append(ci)\n    return coeffs\ndef build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n# Transforma string em função:\ndef stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):\n(Anotação: fazer as funções de maneira não recursiva usando a biblioteca sympy)",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):\n(Anotação: fazer as funções de maneira não recursiva usando a biblioteca sympy)\n\"\"\"\ndef legendre(x, n):\n    if n == 0:\n        return 1",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "legendre",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def legendre(x, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    else:\n        return ((2 * n - 1) * x * legendre(x, n - 1) - (n - 1) * legendre(x, n - 2)) / n\ndef optimized_legendre(n):\n    \"\"\"\n    Função que gera a lista do primeiro até o e-nésimo polinômio de Legendre de maneira iterativa",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "optimized_legendre",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def optimized_legendre(n):\n    \"\"\"\n    Função que gera a lista do primeiro até o e-nésimo polinômio de Legendre de maneira iterativa\n    Obs.: x deve ser um elemento da classe symbol da biblioteca sympy.\n    \"\"\"\n    x = symbols('x')\n    P = [1, x]\n    P_func_list = [lambda x: 1, lambda x: x]\n    for i in range(2, n+1):\n        p_i = ((2 * i - 1) * x * P[1] - (i - 1) * P[0]) / i",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "build_legendre_polynomial",
        "kind": 2,
        "importPath": "Trabalho 03.legendre03",
        "description": "Trabalho 03.legendre03",
        "peekOfCode": "def build_legendre_polynomial(n):\n    def p(x):\n        return legendre(x, n)\n    return p\nif __name__ == '__main__':\n    # Exemplo 02:\n    def f(x):\n        return tanh(3 * x) * cos(3 * x)\n    a = -1\n    b = 1",
        "detail": "Trabalho 03.legendre03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):\n            new_item = ((4**(i+1))*table[j+1] - table[j])/(4**(i+1) - 1)",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def quadrature(f, a, b, cord_quadrature, coeffs_quadrature):\n    g = changeToQuadratureInterval(f, a, b)\n    sum = 0\n    for xi, ci in zip(cord_quadrature, coeffs_quadrature):\n        sum += ci*g(xi)\n    return sum\ndef changeToQuadratureInterval(f, a, b):\n    \"\"\"\n    Muda uma função do intervalo [a, b] para o intervalo [-1, 1].\n    Obs.: Note que nesta transformação a função também é multiplicada, isto pois ao se realizar a substituição de x pela nova variável t no",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "changeToQuadratureInterval",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def changeToQuadratureInterval(f, a, b):\n    \"\"\"\n    Muda uma função do intervalo [a, b] para o intervalo [-1, 1].\n    Obs.: Note que nesta transformação a função também é multiplicada, isto pois ao se realizar a substituição de x pela nova variável t no\n    intervalo [a, b] deve-se fazer a substituição dx = (dt/dx)dt.\n    \"\"\"\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef aprox_coeffs(func_list, f, a, b, n):",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs_ort",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def aprox_coeffs_ort(func_list, f, a, b, cord_quadrature, coeffs_quadrature):\n    coeffs = []\n    for fi in func_list:\n        ci = quadrature(lambda x: f(x)*fi(x), a, b, cord_quadrature, coeffs_quadrature)/quadrature(lambda x: fi(x)*fi(x), a, b, cord_quadrature, coeffs_quadrature)\n        coeffs.append(ci)\n    return coeffs\ndef build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\n# Transforma string em função:\ndef stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\ndef symbolToFunc(expr):\n    return stringToFunc(str(expr))\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):\n(Anotação: fazer as funções de maneira não recursiva usando a biblioteca sympy)",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "symbolToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def symbolToFunc(expr):\n    return stringToFunc(str(expr))\n\"\"\"\nFunções recursivas para geração dos polinômios de Legendre (lembre-se que estes polinômios são dois a dois ortogonais,\nportanto podemos utilizar o método mais eficiente para se obter os coeficientes da aproximação para uma determinar função f(x)):\n(Anotação: fazer as funções de maneira não recursiva usando a biblioteca sympy)\n\"\"\"\ndef legendre(x, n):\n    if n == 0:\n        return 1",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "legendre",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def legendre(x, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    else:\n        return ((2 * n - 1) * x * legendre(x, n - 1) - (n - 1) * legendre(x, n - 2)) / n\ndef optimized_legendre(n):\n    \"\"\"\n    Função que gera a lista do primeiro até o e-nésimo polinômio de Legendre de maneira iterativa",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "optimized_legendre",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def optimized_legendre(n):\n    \"\"\"\n    Função que gera a lista do primeiro até o e-nésimo polinômio de Legendre de maneira iterativa\n    Obs.: x deve ser um elemento da classe symbol da biblioteca sympy.\n    \"\"\"\n    x = symbols('x')\n    P = [1, x]\n    P_func_list = [lambda x: 1, lambda x: x]\n    for i in range(2, n+1):\n        p_i = ((2 * i - 1) * x * P[1] - (i - 1) * P[0]) / i",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "build_legendre_polynomial",
        "kind": 2,
        "importPath": "Trabalho 03.legendre04",
        "description": "Trabalho 03.legendre04",
        "peekOfCode": "def build_legendre_polynomial(n):\n    def p(x):\n        return legendre(x, n)\n    return p\nif __name__ == '__main__':\n    \"\"\"\n    Exemplo 02:\n    Não está funcionando (nota 7,71 na questão 10)\n    \"\"\"\n    def f(x):",
        "detail": "Trabalho 03.legendre04",
        "documentation": {}
    },
    {
        "label": "raiz2",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz2 = [-0.5773502691896257, 0.5773502691896257]\npeso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso2",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso2 = [1.0, 1.0]\nraiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz3",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz3 = [0, -0.7745966692414834, 0.7745966692414834]\npeso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso3",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso3 = [0.8888888888888888, 0.5555555555555556, 0.5555555555555556]\nraiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz4",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz4 = [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526]\npeso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso4",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso4 = [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385]\nraiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz5",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz5 = [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664]\npeso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso5",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso5 = [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908]\nraiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz6",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz6 = [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152,\n            0.932469514203152]\npeso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso6",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso6 = [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036,\n            0.17132449237917036]\nraiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz7",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz7 = [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585,\n            0.9491079123427585]\npeso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso7",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso7 = [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664,\n            0.1294849661688697, 0.1294849661688697]\nraiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz8",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz8 = [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267,\n            0.7966664774136267, -0.9602898564975363, 0.9602898564975363]\npeso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso8",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso8 = [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448,\n            0.22238103445337448, 0.10122853629037626, 0.10122853629037626]\nraiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz9",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz9 = [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089,\n            0.3242534234038089, -0.6133714327005904, 0.6133714327005904]\npeso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso9",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso9 = [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441,\n            0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544]\nraiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz10",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz10 = [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,\n            0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]\npeso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso10",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso10 = [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204,\n            0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814]\nraiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz11",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz11 = [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118,\n            -0.7301520055740494,\n            0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057]\npeso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso11",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso11 = [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048,\n            0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366,\n            0.05566856711617366]\nraiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz12",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz12 = [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175,\n            0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749,\n            -0.9815606342467192, 0.9815606342467192]\npeso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso12",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso12 = [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592,\n            0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843,\n            0.04717533638651183, 0.04717533638651183]\nraiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz13",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz13 = [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687,\n            -0.6423493394403402,\n            0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779,\n            -0.9841830547185881, 0.9841830547185881]\npeso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso13",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso13 = [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885,\n            0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845,\n            0.09212149983772845, 0.04048400476531588, 0.04048400476531588]\nraiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz14",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz14 = [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541,\n            0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765,\n            -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123]\npeso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso14",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso14 = [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782,\n            0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319,\n            0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186]\nraiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz15",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz15 = [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634,\n            -0.5709721726085388,\n            0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272,\n            -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854]\npeso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso15",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso15 = [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622,\n            0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194,\n            0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727]\nraiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz16",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz16 = [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737,\n            0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003,\n            -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499,\n            0.9894009349916499]\npeso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso16",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso16 = [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254,\n            0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388,\n            0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894,\n            0.027152459411754096,\n            0.027152459411754096]\nraiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz17",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz17 = [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763,\n            -0.5126905370864769,\n            0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014,\n            -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174,\n            0.9905754753144174]\npeso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso17",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso17 = [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004,\n            0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397,\n            0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872,\n            0.02414830286854793, 0.02414830286854793]\nraiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz18",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz18 = [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263,\n            0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532,\n            -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977,\n            0.9558239495713977, -0.9915651684209309, 0.9915651684209309]\npeso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso18",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso18 = [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524,\n            0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846,\n            0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698,\n            0.0497145488949698, 0.02161601352648331, 0.02161601352648331]\nraiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz19",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz19 = [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983,\n            -0.46457074137596094,\n            0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294,\n            -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483,\n            0.96020815213483, -0.9924068438435844, 0.9924068438435844]\npeso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso19",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso19 = [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967,\n            0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399,\n            0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123,\n            0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478]\nraiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "raiz20",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "raiz20 = [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507,\n            -0.37370608871541955,\n            0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515,\n            -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326,\n            0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949]\npeso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "peso20",
        "kind": 5,
        "importPath": "Trabalho 03.NodesAndWeights",
        "description": "Trabalho 03.NodesAndWeights",
        "peekOfCode": "peso20 = [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204,\n            0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841,\n            0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907,\n            0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118]",
        "detail": "Trabalho 03.NodesAndWeights",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.otimização01",
        "description": "Trabalho 03.otimização01",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef aprox_coeffs(func_list, f, a, b, n):\n    A = []",
        "detail": "Trabalho 03.otimização01",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.otimização01",
        "description": "Trabalho 03.otimização01",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = trapeze_sum(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.otimização01",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.otimização01",
        "description": "Trabalho 03.otimização01",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\nif __name__ == '__main__':\n    # Exemplo 01:\n    func_list = [lambda x: 1, lambda x: x, lambda x: x**2, lambda x: x**3, lambda x: x**4, lambda x: x**5, \n        lambda x: x**6, lambda x: x**7, lambda x: x**8]\n    def f(x):\n        return  x**2 * exp(x) * sqrt(log(2 + cos(-x**2)))",
        "detail": "Trabalho 03.otimização01",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.otimização02",
        "description": "Trabalho 03.otimização02",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef richardson(f, a, b, n, k):\n    # Lembre-se que h = (b-a)/n ; o valor de n é dado indiretamente nas questões...",
        "detail": "Trabalho 03.otimização02",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.otimização02",
        "description": "Trabalho 03.otimização02",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    # Lembre-se que h = (b-a)/n ; o valor de n é dado indiretamente nas questões...\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):",
        "detail": "Trabalho 03.otimização02",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.otimização02",
        "description": "Trabalho 03.otimização02",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.otimização02",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.otimização02",
        "description": "Trabalho 03.otimização02",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = simpson(lambda x: f(x)*fi(x), a, b, n)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.otimização02",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.otimização02",
        "description": "Trabalho 03.otimização02",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\nif __name__ == '__main__':\n    # Exemplo 01:\n    func_list = [lambda x: 1, lambda x: x, lambda x: x**2, lambda x: x**3, lambda x: x**4, lambda x: x**5, \n        lambda x: x**6, lambda x: x**7, lambda x: x**8]\n    def f(x):\n        return  x**2 * exp(x) * sqrt(log(2 + cos(-x**2)))",
        "detail": "Trabalho 03.otimização02",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.otimização03",
        "description": "Trabalho 03.otimização03",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef richardson(f, a, b, n, k):\n    # Lembre-se que h = (b-a)/n ; o valor de n é dado indiretamente nas questões...",
        "detail": "Trabalho 03.otimização03",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.otimização03",
        "description": "Trabalho 03.otimização03",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    # Lembre-se que h = (b-a)/n ; o valor de n é dado indiretamente nas questões...\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):",
        "detail": "Trabalho 03.otimização03",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.otimização03",
        "description": "Trabalho 03.otimização03",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.otimização03",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.otimização03",
        "description": "Trabalho 03.otimização03",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, n):\n    A = []\n    B = []\n    k = 8\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = richardson(lambda x: f(x)*fi(x), a, b, n, k)\n        for j, fj in enumerate(func_list):\n            \"\"\"",
        "detail": "Trabalho 03.otimização03",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.otimização03",
        "description": "Trabalho 03.otimização03",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\nif __name__ == '__main__':\n    # Exemplo 01:\n    func_list = [lambda x: 2, lambda x: x - 1, lambda x: x**2 + 1, lambda x: x**3 + x - 3, lambda x: 0.5 * x**4 - 3 * x**2 + 1, lambda x: x**5 - 4 * x + 2, \n        lambda x: x**7-x]\n    def f(x):\n        return x**2 * cos(x * sin(log(1 + x**2)))",
        "detail": "Trabalho 03.otimização03",
        "documentation": {}
    },
    {
        "label": "trapeze_sum",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def trapeze_sum(f, a, b, n):\n    sum = f(a)/2 + f(b)/2\n    base = (b-a)/n\n    # Lembre-se que x0 = a e xn = b, por isso no seguinte loop k varia de 1 até n-1:\n    for k in range(1, n):\n        sum += f(a + k*base)\n    area = base*sum\n    return area\ndef richardson(f, a, b, n, k):\n    # Lembre-se que h = (b-a)/n ; o valor de n é dado indiretamente nas questões...",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "richardson",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def richardson(f, a, b, n, k):\n    # Lembre-se que h = (b-a)/n ; o valor de n é dado indiretamente nas questões...\n    table = []\n    # Obs.: dada essa função de erro inicial tem-se que Fk(h) diminui o erro para O(h^(2*k))\n    k = int(k/2)\n    for i in range(k):\n        item = trapeze_sum(f, a, b, (2**i)*n)\n        table.append(item)\n    for i in range(k):\n        for j in range(k-i-1):",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def simpson(f, a, b, num_subintervals):\n    # Obs.: num_intervals(n) é o número de subintervalos, n/2 é o número de parábolas e n+1 é o número de pontos na partição.\n    h = (b-a)/num_subintervals\n    sum = f(a) + f(b)\n    # k varia até 2n\n    for k in range(2, num_subintervals, 2):\n        sum += 2*f(a + k*h)\n    # k varia até 2n-1 (quando k = 2n+1 o loop para)\n    for k in range(1, num_subintervals, 2):\n        sum += 4*f(a + k*h)",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "quadrature",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def quadrature(f, a, b, cord, coeffs):\n    g = change(f, a, b)\n    # exact_for_degree_less_than = 24\n    # order = str(int(exact_for_degree_less_than/2))    \n    # lists_names = ['raiz'+order, 'peso'+order]\n    # cord = locals()[lists_names[0]]\n    # coeffs = locals()[lists_names[1]]\n    sum = 0\n    for xi, ci in zip(cord, coeffs):\n        sum += ci*g(xi)",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "stringToFunc",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def stringToFunc(string):\n    def f(x):\n        return eval(string)\n    return f\n# Mudança de variável na função f para se encaixar nos limites de integração [-1, 1]:\ndef change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef aprox_coeffs(func_list, f, a, b, cord, coeffs):",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def change(f, a, b):\n    def g(u):\n        return f((b+a)/2 + (b-a) * (u/2)) * (b-a)/2\n    return g\ndef aprox_coeffs(func_list, f, a, b, cord, coeffs):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "aprox_coeffs",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def aprox_coeffs(func_list, f, a, b, cord, coeffs):\n    A = []\n    B = []\n    # Obs.: note que a matriz A é simétrica portanto não precisamos calcular n² integrais\n    for i, fi in enumerate(func_list):\n        row = []\n        b_i = quadrature(lambda x: f(x)*fi(x), a, b, cord, coeffs)\n        for j, fj in enumerate(func_list):\n            \"\"\"\n            Note que:",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    },
    {
        "label": "build_aprox_func",
        "kind": 2,
        "importPath": "Trabalho 03.otimização04",
        "description": "Trabalho 03.otimização04",
        "peekOfCode": "def build_aprox_func(func_list, coeffs):\n    def g(x):\n        return sum(ck*fk(x) for ck, fk in zip(coeffs, func_list))\n    return g\nif __name__ == '__main__':\n    # Listas de pontos e pesos para quadratura gaussiana:\n    from NodesAndWeights import *\n    exact_for_degree_less_than = 24\n    order = str(int(exact_for_degree_less_than/2))    \n    lists_names = ['raiz'+order, 'peso'+order]",
        "detail": "Trabalho 03.otimização04",
        "documentation": {}
    }
]