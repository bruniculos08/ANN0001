[
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "euler",
        "kind": 2,
        "importPath": "edo01",
        "description": "edo01",
        "peekOfCode": "def euler(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for k in range(1, n):\n        # Calculando x_k:\n        x = x0 + k*h\n        # Calculando y_k:\n        y_k = Y[k-1] + df(X[k-1], Y[k-1])*h\n        X.append(x)",
        "detail": "edo01",
        "documentation": {}
    },
    {
        "label": "euler",
        "kind": 2,
        "importPath": "edo02",
        "description": "edo02",
        "peekOfCode": "def euler(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        # Calculando y_k:\n        y_k = Y[k-1] + df(X[k-1], Y[k-1])*h\n        Y.append(y_k)",
        "detail": "edo02",
        "documentation": {}
    },
    {
        "label": "heun",
        "kind": 2,
        "importPath": "edoHeun",
        "description": "edoHeun",
        "peekOfCode": "def heun(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + h, Y[k-1] + m1*h)\n        yk = Y[k-1] + (h/2)*(m1 + m2)",
        "detail": "edoHeun",
        "documentation": {}
    },
    {
        "label": "eulerPontoMedio",
        "kind": 2,
        "importPath": "edoPontoMédio",
        "description": "edoPontoMédio",
        "peekOfCode": "def eulerPontoMedio(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + (h/2), Y[k-1] + (h/2)*m1)\n        yk = Y[k-1] + h*m2",
        "detail": "edoPontoMédio",
        "documentation": {}
    },
    {
        "label": "ralston",
        "kind": 2,
        "importPath": "edoRalston",
        "description": "edoRalston",
        "peekOfCode": "def ralston(df, x0, y0, X):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0] + X\n    Y = [y0]\n    n = len(X)\n    for k in range(1, n):\n        h = X[k] - X[k-1]\n        m1 = df(X[k-1], Y[k-1])\n        m2 = df(X[k-1] + (3/4)*h, Y[k-1] + (3/4)*h*m1)\n        yk = Y[k-1] + (h/3)*(m1 + 2*m2)",
        "detail": "edoRalston",
        "documentation": {}
    },
    {
        "label": "rungeKutta",
        "kind": 2,
        "importPath": "edoRungeKutta",
        "description": "edoRungeKutta",
        "peekOfCode": "def rungeKutta(df, x0, y0, h, n):\n    # Criando listas de coordenadas com as coordenadas iniciais:\n    X = [x0]\n    Y = [y0]\n    for _ in range(1, n):\n        m1 = df(x0, y0)\n        m2 = df(x0 + h/2, y0 + m1*h/2)\n        m3 = df(x0 + h/2, y0 + m2*h/2)\n        m4 = df(x0 + h, y0 + m3*h)\n        x0 += h",
        "detail": "edoRungeKutta",
        "documentation": {}
    }
]