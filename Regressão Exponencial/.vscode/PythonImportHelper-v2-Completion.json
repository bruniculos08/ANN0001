[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "calc_coeffs",
        "kind": 2,
        "importPath": "Regressão Exponencial",
        "description": "Regressão Exponencial",
        "peekOfCode": "def calc_coeffs(X, Y):\n    # (1) Cria a matriz do lado esquerdo da equação:\n    X_matrix = []\n    for i in range(2):\n        row = []\n        for j in range(2):\n            sum = 0\n            for xi in X: \n                sum += xi ** (i + j)\n            row.append(sum)",
        "detail": "Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "build_poly",
        "kind": 2,
        "importPath": "Regressão Exponencial",
        "description": "Regressão Exponencial",
        "peekOfCode": "def build_poly(coeffs):\n    def func(x):\n        result = 0\n        for i, ci in enumerate(coeffs):\n            result += ci*(x**i)\n        return result\n    return func\ndef calc_exp_coeffs(X, Y, expoent):\n    const = min(Y)\n    if(const <= 0):",
        "detail": "Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "calc_exp_coeffs",
        "kind": 2,
        "importPath": "Regressão Exponencial",
        "description": "Regressão Exponencial",
        "peekOfCode": "def calc_exp_coeffs(X, Y, expoent):\n    const = min(Y)\n    if(const <= 0):\n        const = abs(const) + 1\n    else:\n        const = 0\n    linearized_Y = [log(yi + const, expoent) for yi in Y]\n    coeffs = calc_coeffs(X, linearized_Y)\n    # Considerando a equação exponencial na forma y = a.k^(b.x) - c\n    a = expoent**(coeffs[0])",
        "detail": "Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "build_exp",
        "kind": 2,
        "importPath": "Regressão Exponencial",
        "description": "Regressão Exponencial",
        "peekOfCode": "def build_exp(coeffs):\n    def f(x):\n        return coeffs['a']*coeffs['k']**(coeffs['b']*x) - coeffs['c']\n    return f\ndef calc_exp_coeffs_inverse(X, Y, expoent):\n    const = min(X)\n    if(const <= 0):\n        const = abs(const) + 1\n    else:\n        const = 0",
        "detail": "Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "calc_exp_coeffs_inverse",
        "kind": 2,
        "importPath": "Regressão Exponencial",
        "description": "Regressão Exponencial",
        "peekOfCode": "def calc_exp_coeffs_inverse(X, Y, expoent):\n    const = min(X)\n    if(const <= 0):\n        const = abs(const) + 1\n    else:\n        const = 0\n    linearized_X = [log(xi + const, expoent) for xi in X]\n    coeffs = calc_coeffs(linearized_X, Y)\n    b = coeffs[0]\n    a = coeffs[1]",
        "detail": "Regressão Exponencial",
        "documentation": {}
    },
    {
        "label": "build_exp_inverse",
        "kind": 2,
        "importPath": "Regressão Exponencial",
        "description": "Regressão Exponencial",
        "peekOfCode": "def build_exp_inverse(coeffs):\n    def f(x):\n        return coeffs['b'] + coeffs['a']*log(x+coeffs['k'], coeffs['m'])\n    return f\nif __name__ == '__main__':\n    # Exemplo 01:\n    X = [0.0202, 0.0914, 0.1416, 0.1667, 0.2266, 0.3154, 0.335, 0.4089, 0.4679, 0.5171, 0.5905, 0.6387, 0.7131, 0.7527, 0.8102, 0.8425, 0.8921, 0.9473, 1.0221, 1.0796, 1.1121, 1.1826, 1.2454, 1.3067, 1.3656, 1.4166, 1.4982, 1.5326, 1.5562, 1.6396, 1.7149, 1.7656, 1.8161, 1.8879, 1.9055, 1.9838]\n    Y = [4.397, 5.1077, 6.5344, 7.5504, 4.8005, 5.7035, 5.1387, 5.9875, 6.831, 7.3067, 7.7048, 7.2332, 8.953, 9.0576, 10.0124, 9.405, 11.3052, 12.3553, 13.0991, 12.6969, 13.5873, 15.7953, 15.1653, 16.9946, 18.6564, 18.8157, 21.0904, 21.7505, 22.4597, 24.6642, 25.8545, 27.892, 30.2306, 34.2837, 33.172, 36.0403]\n    values = [0.2608, 0.3236, 0.5979, 1.9546, 1.96]\n    expoent = 2",
        "detail": "Regressão Exponencial",
        "documentation": {}
    }
]